{"version":3,"sources":["node_modules/@angular/material/fesm2022/toolbar.mjs","src/app/pipes/task-state.pipe.ts","src/app/button-task-actions/button-task-actions.component.ts","src/app/button-task-actions/button-task-actions.component.html","src/app/pipes/format-duration.pipe.ts","src/app/pipes/task-duration.pipe.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, ContentChildren, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nconst _c0 = [\"*\", [[\"mat-toolbar-row\"]]];\nconst _c1 = [\"*\", \"mat-toolbar-row\"];\nlet MatToolbarRow = /*#__PURE__*/(() => {\n  class MatToolbarRow {\n    static {\n      this.Éµfac = function MatToolbarRow_Factory(t) {\n        return new (t || MatToolbarRow)();\n      };\n    }\n    static {\n      this.Éµdir = /* @__PURE__ */i0.ÉµÉµdefineDirective({\n        type: MatToolbarRow,\n        selectors: [[\"mat-toolbar-row\"]],\n        hostAttrs: [1, \"mat-toolbar-row\"],\n        exportAs: [\"matToolbarRow\"],\n        standalone: true\n      });\n    }\n  }\n  return MatToolbarRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatToolbar = /*#__PURE__*/(() => {\n  class MatToolbar {\n    constructor(_elementRef, _platform, document) {\n      this._elementRef = _elementRef;\n      this._platform = _platform;\n      // TODO: make the document a required param when doing breaking changes.\n      this._document = document;\n    }\n    ngAfterViewInit() {\n      if (this._platform.isBrowser) {\n        this._checkToolbarMixedModes();\n        this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n      }\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n    _checkToolbarMixedModes() {\n      if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        // Check if there are any other DOM nodes that can display content but aren't inside of\n        // a <mat-toolbar-row> element.\n        const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes).filter(node => !(node.classList && node.classList.contains('mat-toolbar-row'))).filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8)).some(node => !!(node.textContent && node.textContent.trim()));\n        if (isCombinedUsage) {\n          throwToolbarMixedModesError();\n        }\n      }\n    }\n    static {\n      this.Éµfac = function MatToolbar_Factory(t) {\n        return new (t || MatToolbar)(i0.ÉµÉµdirectiveInject(i0.ElementRef), i0.ÉµÉµdirectiveInject(i1.Platform), i0.ÉµÉµdirectiveInject(DOCUMENT));\n      };\n    }\n    static {\n      this.Éµcmp = /* @__PURE__ */i0.ÉµÉµdefineComponent({\n        type: MatToolbar,\n        selectors: [[\"mat-toolbar\"]],\n        contentQueries: function MatToolbar_ContentQueries(rf, ctx, dirIndex) {\n          if (rf & 1) {\n            i0.ÉµÉµcontentQuery(dirIndex, MatToolbarRow, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ÉµÉµqueryRefresh(_t = i0.ÉµÉµloadQuery()) && (ctx._toolbarRows = _t);\n          }\n        },\n        hostAttrs: [1, \"mat-toolbar\"],\n        hostVars: 6,\n        hostBindings: function MatToolbar_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ÉµÉµclassMap(ctx.color ? \"mat-\" + ctx.color : \"\");\n            i0.ÉµÉµclassProp(\"mat-toolbar-multiple-rows\", ctx._toolbarRows.length > 0)(\"mat-toolbar-single-row\", ctx._toolbarRows.length === 0);\n          }\n        },\n        inputs: {\n          color: \"color\"\n        },\n        exportAs: [\"matToolbar\"],\n        standalone: true,\n        features: [i0.ÉµÉµStandaloneFeature],\n        ngContentSelectors: _c1,\n        decls: 2,\n        vars: 0,\n        template: function MatToolbar_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ÉµÉµprojectionDef(_c0);\n            i0.ÉµÉµprojection(0);\n            i0.ÉµÉµprojection(1, 1);\n          }\n        },\n        styles: [\".mat-toolbar{background:var(--mat-toolbar-container-background-color);color:var(--mat-toolbar-container-text-color)}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font-family:var(--mat-toolbar-title-text-font);font-size:var(--mat-toolbar-title-text-size);line-height:var(--mat-toolbar-title-text-line-height);font-weight:var(--mat-toolbar-title-text-weight);letter-spacing:var(--mat-toolbar-title-text-tracking);margin:0}.cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar .mat-form-field-underline,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-focused .mat-form-field-ripple{background-color:currentColor}.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-select-value,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar .mat-mdc-button-base.mat-mdc-button-base.mat-unthemed{--mdc-text-button-label-text-color:var(--mat-toolbar-container-text-color);--mdc-outlined-button-label-text-color:var(--mat-toolbar-container-text-color)}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap;height:var(--mat-toolbar-standard-height)}@media(max-width: 599px){.mat-toolbar-row,.mat-toolbar-single-row{height:var(--mat-toolbar-mobile-height)}}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%;min-height:var(--mat-toolbar-standard-height)}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:var(--mat-toolbar-mobile-height)}}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatToolbar;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nfunction throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' + 'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' + 'inside of a `<mat-toolbar>` for a single row.');\n}\nlet MatToolbarModule = /*#__PURE__*/(() => {\n  class MatToolbarModule {\n    static {\n      this.Éµfac = function MatToolbarModule_Factory(t) {\n        return new (t || MatToolbarModule)();\n      };\n    }\n    static {\n      this.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n        type: MatToolbarModule\n      });\n    }\n    static {\n      this.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n        imports: [MatCommonModule, MatCommonModule]\n      });\n    }\n  }\n  return MatToolbarModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { RouteTaskState, TaskState } from '@app/domain/task';\r\nimport { assertNever } from '@app/utils/assert';\r\n\r\n@Pipe({\r\n  name: 'taskState',\r\n  standalone: true,\r\n})\r\nexport class TaskStatePipe implements PipeTransform {\r\n  transform(value?: RouteTaskState) {\r\n    switch (value) {\r\n      case TaskState.active:\r\n        return 'Active';\r\n      case TaskState.dropped:\r\n        return 'Dropped';\r\n      case TaskState.finished:\r\n        return 'Finished';\r\n      case 'all':\r\n        return 'All';\r\n      case undefined:\r\n        return 'ðŸ˜µ';\r\n      default:\r\n        return assertNever(value);\r\n    }\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, inject, input } from '@angular/core';\r\nimport { MatIconButton } from '@angular/material/button';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatMenu, MatMenuContent, MatMenuItem, MatMenuTrigger } from '@angular/material/menu';\r\nimport { Task, TaskState } from '@app/domain/task';\r\nimport { TaskStateIconPipe } from '@app/pipes/task-state-icon.pipe';\r\nimport { TaskStatePipe } from '@app/pipes/task-state.pipe';\r\nimport { AppStore } from '@app/services/state';\r\n\r\n@Component({\r\n  templateUrl: './button-task-actions.component.html',\r\n  styleUrls: ['./button-task-actions.component.scss'],\r\n  selector: 'button-task-actions',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  standalone: true,\r\n  imports: [\r\n    MatMenu,\r\n    MatMenuTrigger,\r\n    MatMenuContent,\r\n    MatMenuItem,\r\n    MatIconButton,\r\n    MatIcon,\r\n    TaskStateIconPipe,\r\n    TaskStatePipe,\r\n  ],\r\n})\r\nexport class ButtonTaskActionsComponent {\r\n  private store = inject(AppStore);\r\n  task = input<Task>();\r\n  taskState = TaskState;\r\n\r\n  renameTask() {\r\n    const task = this.task();\r\n    if (task) this.store.renameTask(task.id);\r\n  }\r\n  deleteTask() {\r\n    const task = this.task();\r\n    if (task) this.store.deleteTask(task.id);\r\n  }\r\n  changeTaskState(state: TaskState) {\r\n    const task = this.task();\r\n    if (task) this.store.updateTaskState(task.id, state);\r\n  }\r\n}\r\n","@if (task(); as task) {\r\n  <button mat-icon-button [matMenuTriggerFor]=\"menu\" data-e2e=\"button-task-actions__trigger\">\r\n    <mat-icon svgIcon=\"more_vert\"></mat-icon>\r\n  </button>\r\n  <mat-menu #menu=\"matMenu\">\r\n    <ng-template matMenuContent>\r\n      <button mat-menu-item [mat-menu-trigger-for]=\"statuses\" data-e2e=\"button-task-actions__selector-state\">\r\n        <mat-icon [svgIcon]=\"task.state | taskStateIcon\"></mat-icon>\r\n        State: {{ task.state | taskState }}\r\n      </button>\r\n      <button mat-menu-item type=\"button\" (click)=\"renameTask()\" data-e2e=\"button-task-actions__button-rename\">\r\n        Rename\r\n      </button>\r\n      <button mat-menu-item type=\"button\" (click)=\"deleteTask()\" data-e2e=\"button-task-actions__button-delete\">\r\n        Delete\r\n      </button>\r\n    </ng-template>\r\n  </mat-menu>\r\n  <mat-menu #statuses=\"matMenu\">\r\n    <button\r\n      mat-menu-item\r\n      type=\"button\"\r\n      (click)=\"changeTaskState(taskState.active)\"\r\n      data-e2e=\"button-task-actions__state-option-active\"\r\n    >\r\n      <mat-icon [svgIcon]=\"taskState.active | taskStateIcon\"></mat-icon>Change to active\r\n    </button>\r\n    <button\r\n      mat-menu-item\r\n      type=\"button\"\r\n      (click)=\"changeTaskState(taskState.finished)\"\r\n      data-e2e=\"button-task-actions__state-option-finished\"\r\n    >\r\n      <mat-icon [svgIcon]=\"taskState.finished | taskStateIcon\"></mat-icon>Change to finished\r\n    </button>\r\n    <button\r\n      mat-menu-item\r\n      type=\"button\"\r\n      (click)=\"changeTaskState(taskState.dropped)\"\r\n      data-e2e=\"button-task-actions__state-option-dropped\"\r\n    >\r\n      <mat-icon [svgIcon]=\"taskState.dropped | taskStateIcon\"></mat-icon>Change to dropped\r\n    </button>\r\n  </mat-menu>\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { formatHours } from '@app/domain/date-time';\r\nimport { isNumber } from '@app/utils/assert';\r\nimport { Observable, distinctUntilChanged, map } from 'rxjs';\r\n\r\n@Pipe({\r\n  name: 'formatDuration',\r\n  standalone: true,\r\n})\r\nexport class FormatDurationPipe implements PipeTransform {\r\n  transform(value: number): string;\r\n  transform(value: Observable<number>): Observable<string>;\r\n  transform(value: number | Observable<number>) {\r\n    return isNumber(value)\r\n      ? formatHours(value)\r\n      : value.pipe(\r\n          map((v) => formatHours(v)),\r\n          distinctUntilChanged(),\r\n        );\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { taskDuration } from '@app/domain/task';\r\n\r\n@Pipe({ name: 'taskDuration', standalone: true })\r\nexport class TaskDurationPipe implements PipeTransform {\r\n  transform = taskDuration;\r\n}\r\n"],"mappings":"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","names":["_c0","_c1","MatToolbarRow","ÉµÉµdefineDirective","MatToolbar","_elementRef","_platform","document","ÉµÉµdirectiveInject","ElementRef","Platform","DOCUMENT","ÉµÉµdefineComponent","rf","ctx","dirIndex","ÉµÉµcontentQuery","_t","ÉµÉµqueryRefresh","ÉµÉµloadQuery","ÉµÉµclassMap","ÉµÉµclassProp","ÉµÉµStandaloneFeature","ÉµÉµprojectionDef","ÉµÉµprojection","MatToolbarModule","ÉµÉµdefineNgModule","ÉµÉµdefineInjector","MatCommonModule","TaskStatePipe","transform","value","TaskState","active","dropped","finished","undefined","assertNever","pure","standalone","ÉµÉµelementStart","ÉµÉµelement","ÉµÉµtext","ÉµÉµelementEnd","ÉµÉµlistener","ÉµÉµrestoreView","_r2","ctx_r2","ÉµÉµnextContext","ÉµÉµresetView","renameTask","deleteTask","ÉµÉµproperty","statuses_r5","ÉµÉµadvance","ÉµÉµpipeBind1","task_r4","state","ÉµÉµtextInterpolate1","ÉµÉµtemplate","ButtonTaskActionsComponent_Conditional_0_ng_template_4_Template","_r1","changeTaskState","taskState","active","finished","dropped","menu_r6","ButtonTaskActionsComponent","constructor","store","inject","AppStore","task","input","TaskState","id","updateTaskState","selectors","inputs","standalone","features","ÉµÉµStandaloneFeature","decls","vars","consts","template","rf","ctx","ButtonTaskActionsComponent_Conditional_0_Template","ÉµÉµconditional","tmp_0_0","MatMenu","MatMenuTrigger","MatMenuContent","MatMenuItem","MatIconButton","MatIcon","TaskStateIconPipe","TaskStatePipe","styles","changeDetection","FormatDurationPipe","transform","value","isNumber","formatHours","pipe","map","v","distinctUntilChanged","pure","standalone","TaskDurationPipe","constructor","transform","taskDuration","pure","standalone"],"x_google_ignoreList":[0]}