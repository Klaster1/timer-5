{
  "version": 3,
  "sources": ["src/app/utils/string.ts", "src/app/dialog-hotkeys-cheatsheet/dialog-hotkeys-cheatsheet.component.ts", "src/app/dialog-hotkeys-cheatsheet/dialog-hotkeys-cheatsheet.component.html"],
  "sourcesContent": ["export const hasCyrillics = (value: string): boolean => !!value.match(/[а-я]/);\n", "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { MatButton } from '@angular/material/button';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogConfig,\n  MatDialogContent,\n  MatDialogTitle,\n} from '@angular/material/dialog';\nimport { MapPipe } from '@app/pipes/map.pipe';\nimport { hasCyrillics } from '@app/utils/string';\nimport { HotkeysService } from 'angular2-hotkeys';\n\n@Component({\n  selector: 'dialog-hotkeys-cheatsheet',\n  templateUrl: './dialog-hotkeys-cheatsheet.component.html',\n  styleUrls: ['./dialog-hotkeys-cheatsheet.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogClose, MatButton, MapPipe],\n})\nexport default class DialogHotkeysCheatsheetComponent {\n  static dialogConfig: MatDialogConfig = { width: undefined };\n  private hotkeysService = inject(HotkeysService);\n  get keys() {\n    return this.hotkeysService.hotkeys.filter((key) => key.description);\n  }\n  withoutCyrillics = (values: string[]): string[] => [...values].filter((value) => !hasCyrillics(value));\n}\n", "<h1 mat-dialog-title>Keyboard shortcuts</h1>\n<div mat-dialog-content>\n  <dl>\n    @for (key of keys; track key.action) {\n      <dt>\n        @for (formatted of key.formatted | map: withoutCyrillics; track formatted) {\n          <kbd>{{ formatted }}</kbd>\n        }\n      </dt>\n      <dd>{{ key.description }}</dd>\n    }\n  </dl>\n</div>\n<div mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Close</button>\n</div>\n"],
  "mappings": "0SAAO,IAAMA,EAAgBC,GAA2B,CAAC,CAACA,EAAMC,MAAM,OAAO,iDEMnEC,EAAA,EAAA,KAAA,EAAKC,EAAA,CAAA,EAAeC,EAAA,0BAAfC,EAAA,EAAAC,EAAAC,CAAA,4BAFTL,EAAA,EAAA,IAAA,EACEM,EAAA,EAAAC,EAAA,EAAA,EAAA,MAAA,KAAAC,CAAA,aAGFN,EAAA,EACAF,EAAA,EAAA,IAAA,EAAIC,EAAA,CAAA,EAAqBC,EAAA,gCAJvBC,EAAA,EAAAM,EAAAC,EAAA,EAAA,EAAAC,EAAAC,UAAAC,EAAAC,gBAAA,CAAA,EAIEX,EAAA,CAAA,EAAAC,EAAAO,EAAAI,WAAA,GDYI,IAAOC,EAAP,MAAOA,CAAgC,CACnD,OAAOC,aAAgC,CAAEC,MAAOC,MAAS,EACjDC,eAAiBC,EAAOC,CAAc,EAC9C,IAAIC,MAAI,CACN,OAAO,KAAKH,eAAeI,QAAQC,OAAQC,GAAQA,EAAIX,WAAW,CACpE,CACAD,iBAAoBa,GAA+B,CAAC,GAAGA,CAAM,EAAEF,OAAQG,GAAU,CAACC,EAAaD,CAAK,CAAC,6CANlFZ,EAAgC,2BAAhCA,EAAgCc,UAAA,CAAA,CAAA,2BAAA,CAAA,EAAAC,WAAA,GAAAC,SAAA,CAAAC,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,mBAAA,EAAA,EAAA,CAAA,qBAAA,EAAA,EAAA,CAAA,qBAAA,GAAA,QAAA,KAAA,EAAA,CAAA,aAAA,GAAA,mBAAA,EAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICrBrDtC,EAAA,EAAA,KAAA,CAAA,EAAqBC,EAAA,EAAA,oBAAA,EAAkBC,EAAA,EACvCF,EAAA,EAAA,MAAA,CAAA,EAAwB,EAAA,IAAA,EAEpBM,EAAA,EAAAkC,EAAA,EAAA,EAAA,KAAA,KAAAC,CAAA,EAQFvC,EAAA,EAAK,EAEPF,EAAA,EAAA,MAAA,CAAA,EAAoC,EAAA,SAAA,CAAA,EACEC,EAAA,EAAA,OAAA,EAAKC,EAAA,EAAS,SAXhDC,EAAA,CAAA,EAAAM,EAAA8B,EAAAhB,IAAA,kBDgBQmB,EAAgBC,EAAkBC,EAAkBC,EAAgBC,EAAWC,CAAO,EAAAC,OAAA,CAAA;6EAAA,EAAAC,gBAAA,CAAA,CAAA",
  "names": ["hasCyrillics", "value", "match", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "formatted_r1", "\u0275\u0275repeaterCreate", "DialogHotkeysCheatsheetComponent_For_5_For_2_Template", "\u0275\u0275repeaterTrackByIdentity", "\u0275\u0275repeater", "\u0275\u0275pipeBind2", "key_r2", "formatted", "ctx_r2", "withoutCyrillics", "description", "DialogHotkeysCheatsheetComponent", "dialogConfig", "width", "undefined", "hotkeysService", "inject", "HotkeysService", "keys", "hotkeys", "filter", "key", "values", "value", "hasCyrillics", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "DialogHotkeysCheatsheetComponent_For_5_Template", "_forTrack0", "MatDialogTitle", "MatDialogContent", "MatDialogActions", "MatDialogClose", "MatButton", "MapPipe", "styles", "changeDetection"]
}
