{"version":3,"sources":["node_modules/@angular/material/fesm2022/slider.mjs","src/app/directives/template-context-type.directive.ts","src/app/dialog-split-session/dialog-split-session.component.ts","src/app/dialog-split-session/dialog-split-session.component.html"],"sourcesContent":["import * as i1 from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, ViewChild, ANIMATION_MODULE_TYPE, booleanAttribute, numberAttribute, Optional, ViewChildren, ContentChild, ContentChildren, forwardRef, EventEmitter, signal, Directive, Output, NgModule } from '@angular/core';\nimport { RippleState, MatRipple, MAT_RIPPLE_GLOBAL_OPTIONS, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\n/**\n * Thumb types: range slider has two thumbs (START, END) whereas single point\n * slider only has one thumb (END).\n */\nconst _c0 = [\"knob\"];\nconst _c1 = [\"valueIndicatorContainer\"];\nfunction MatSliderVisualThumb_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2, 1)(2, \"div\", 5)(3, \"span\", 6);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r0.valueIndicatorText);\n  }\n}\nconst _c2 = [\"trackActive\"];\nconst _c3 = [\"*\"];\nfunction MatSlider_Conditional_6_Conditional_2_For_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n  if (rf & 2) {\n    const tickMark_r1 = ctx.$implicit;\n    const ɵ$index_14_r2 = ctx.$index;\n    const ctx_r2 = i0.ɵɵnextContext(3);\n    i0.ɵɵclassMap(tickMark_r1 === 0 ? \"mdc-slider__tick-mark--active\" : \"mdc-slider__tick-mark--inactive\");\n    i0.ɵɵstyleProp(\"transform\", ctx_r2._calcTickMarkTransform(ɵ$index_14_r2));\n  }\n}\nfunction MatSlider_Conditional_6_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵrepeaterCreate(0, MatSlider_Conditional_6_Conditional_2_For_1_Template, 1, 4, \"div\", 8, i0.ɵɵrepeaterTrackByIndex);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵrepeater(ctx_r2._tickMarks);\n  }\n}\nfunction MatSlider_Conditional_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6, 1);\n    i0.ɵɵtemplate(2, MatSlider_Conditional_6_Conditional_2_Template, 2, 0);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵconditional(ctx_r2._cachedWidth ? 2 : -1);\n  }\n}\nfunction MatSlider_Conditional_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-slider-visual-thumb\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"discrete\", ctx_r2.discrete)(\"thumbPosition\", 1)(\"valueIndicatorText\", ctx_r2.startValueIndicatorText);\n  }\n}\nvar _MatThumb = /*#__PURE__*/function (_MatThumb) {\n  _MatThumb[_MatThumb[\"START\"] = 1] = \"START\";\n  _MatThumb[_MatThumb[\"END\"] = 2] = \"END\";\n  return _MatThumb;\n}(_MatThumb || {});\n/** Tick mark enum, for discrete sliders. */\nvar _MatTickMark = /*#__PURE__*/function (_MatTickMark) {\n  _MatTickMark[_MatTickMark[\"ACTIVE\"] = 0] = \"ACTIVE\";\n  _MatTickMark[_MatTickMark[\"INACTIVE\"] = 1] = \"INACTIVE\";\n  return _MatTickMark;\n}(_MatTickMark || {});\n/**\n * Injection token that can be used for a `MatSlider` to provide itself as a\n * parent to the `MatSliderThumb` and `MatSliderRangeThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER = /*#__PURE__*/new InjectionToken('_MatSlider');\n/**\n * Injection token that can be used to query for a `MatSliderThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER_THUMB = /*#__PURE__*/new InjectionToken('_MatSliderThumb');\n/**\n * Injection token that can be used to query for a `MatSliderRangeThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER_RANGE_THUMB = /*#__PURE__*/new InjectionToken('_MatSliderRangeThumb');\n/**\n * Injection token that can be used to query for a `MatSliderVisualThumb`.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst MAT_SLIDER_VISUAL_THUMB = /*#__PURE__*/new InjectionToken('_MatSliderVisualThumb');\n/**\n * A simple change event emitted by the MatSlider component.\n * @deprecated Use event bindings directly on the MatSliderThumbs for `change` and `input` events. See https://v17.material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatSliderChange {}\n\n/**\n * The visual slider thumb.\n *\n * Handles the slider thumb ripple states (hover, focus, and active),\n * and displaying the value tooltip on discrete sliders.\n * @docs-private\n */\nlet MatSliderVisualThumb = /*#__PURE__*/(() => {\n  class MatSliderVisualThumb {\n    constructor(_cdr, _ngZone, _elementRef, _slider) {\n      this._cdr = _cdr;\n      this._ngZone = _ngZone;\n      this._slider = _slider;\n      /** Whether the slider thumb is currently being hovered. */\n      this._isHovered = false;\n      /** Whether the slider thumb is currently being pressed. */\n      this._isActive = false;\n      /** Whether the value indicator tooltip is visible. */\n      this._isValueIndicatorVisible = false;\n      this._platform = inject(Platform);\n      this._onPointerMove = event => {\n        if (this._sliderInput._isFocused) {\n          return;\n        }\n        const rect = this._hostElement.getBoundingClientRect();\n        const isHovered = this._slider._isCursorOnSliderThumb(event, rect);\n        this._isHovered = isHovered;\n        if (isHovered) {\n          this._showHoverRipple();\n        } else {\n          this._hideRipple(this._hoverRippleRef);\n        }\n      };\n      this._onMouseLeave = () => {\n        this._isHovered = false;\n        this._hideRipple(this._hoverRippleRef);\n      };\n      this._onFocus = () => {\n        // We don't want to show the hover ripple on top of the focus ripple.\n        // Happen when the users cursor is over a thumb and then the user tabs to it.\n        this._hideRipple(this._hoverRippleRef);\n        this._showFocusRipple();\n        this._hostElement.classList.add('mdc-slider__thumb--focused');\n      };\n      this._onBlur = () => {\n        // Happens when the user tabs away while still dragging a thumb.\n        if (!this._isActive) {\n          this._hideRipple(this._focusRippleRef);\n        }\n        // Happens when the user tabs away from a thumb but their cursor is still over it.\n        if (this._isHovered) {\n          this._showHoverRipple();\n        }\n        this._hostElement.classList.remove('mdc-slider__thumb--focused');\n      };\n      this._onDragStart = event => {\n        if (event.button !== 0) {\n          return;\n        }\n        this._isActive = true;\n        this._showActiveRipple();\n      };\n      this._onDragEnd = () => {\n        this._isActive = false;\n        this._hideRipple(this._activeRippleRef);\n        // Happens when the user starts dragging a thumb, tabs away, and then stops dragging.\n        if (!this._sliderInput._isFocused) {\n          this._hideRipple(this._focusRippleRef);\n        }\n        // On Safari we need to immediately re-show the hover ripple because\n        // sliders do not retain focus from pointer events on that platform.\n        if (this._platform.SAFARI) {\n          this._showHoverRipple();\n        }\n      };\n      this._hostElement = _elementRef.nativeElement;\n    }\n    ngAfterViewInit() {\n      this._ripple.radius = 24;\n      this._sliderInput = this._slider._getInput(this.thumbPosition);\n      this._sliderInputEl = this._sliderInput._hostElement;\n      const input = this._sliderInputEl;\n      // These listeners don't update any data bindings so we bind them outside\n      // of the NgZone to prevent Angular from needlessly running change detection.\n      this._ngZone.runOutsideAngular(() => {\n        input.addEventListener('pointermove', this._onPointerMove);\n        input.addEventListener('pointerdown', this._onDragStart);\n        input.addEventListener('pointerup', this._onDragEnd);\n        input.addEventListener('pointerleave', this._onMouseLeave);\n        input.addEventListener('focus', this._onFocus);\n        input.addEventListener('blur', this._onBlur);\n      });\n    }\n    ngOnDestroy() {\n      const input = this._sliderInputEl;\n      if (input) {\n        input.removeEventListener('pointermove', this._onPointerMove);\n        input.removeEventListener('pointerdown', this._onDragStart);\n        input.removeEventListener('pointerup', this._onDragEnd);\n        input.removeEventListener('pointerleave', this._onMouseLeave);\n        input.removeEventListener('focus', this._onFocus);\n        input.removeEventListener('blur', this._onBlur);\n      }\n    }\n    /** Handles displaying the hover ripple. */\n    _showHoverRipple() {\n      if (!this._isShowingRipple(this._hoverRippleRef)) {\n        this._hoverRippleRef = this._showRipple({\n          enterDuration: 0,\n          exitDuration: 0\n        });\n        this._hoverRippleRef?.element.classList.add('mat-mdc-slider-hover-ripple');\n      }\n    }\n    /** Handles displaying the focus ripple. */\n    _showFocusRipple() {\n      // Show the focus ripple event if noop animations are enabled.\n      if (!this._isShowingRipple(this._focusRippleRef)) {\n        this._focusRippleRef = this._showRipple({\n          enterDuration: 0,\n          exitDuration: 0\n        }, true);\n        this._focusRippleRef?.element.classList.add('mat-mdc-slider-focus-ripple');\n      }\n    }\n    /** Handles displaying the active ripple. */\n    _showActiveRipple() {\n      if (!this._isShowingRipple(this._activeRippleRef)) {\n        this._activeRippleRef = this._showRipple({\n          enterDuration: 225,\n          exitDuration: 400\n        });\n        this._activeRippleRef?.element.classList.add('mat-mdc-slider-active-ripple');\n      }\n    }\n    /** Whether the given rippleRef is currently fading in or visible. */\n    _isShowingRipple(rippleRef) {\n      return rippleRef?.state === RippleState.FADING_IN || rippleRef?.state === RippleState.VISIBLE;\n    }\n    /** Manually launches the slider thumb ripple using the specified ripple animation config. */\n    _showRipple(animation, ignoreGlobalRippleConfig) {\n      if (this._slider.disabled) {\n        return;\n      }\n      this._showValueIndicator();\n      if (this._slider._isRange) {\n        const sibling = this._slider._getThumb(this.thumbPosition === _MatThumb.START ? _MatThumb.END : _MatThumb.START);\n        sibling._showValueIndicator();\n      }\n      if (this._slider._globalRippleOptions?.disabled && !ignoreGlobalRippleConfig) {\n        return;\n      }\n      return this._ripple.launch({\n        animation: this._slider._noopAnimations ? {\n          enterDuration: 0,\n          exitDuration: 0\n        } : animation,\n        centered: true,\n        persistent: true\n      });\n    }\n    /**\n     * Fades out the given ripple.\n     * Also hides the value indicator if no ripple is showing.\n     */\n    _hideRipple(rippleRef) {\n      rippleRef?.fadeOut();\n      if (this._isShowingAnyRipple()) {\n        return;\n      }\n      if (!this._slider._isRange) {\n        this._hideValueIndicator();\n      }\n      const sibling = this._getSibling();\n      if (!sibling._isShowingAnyRipple()) {\n        this._hideValueIndicator();\n        sibling._hideValueIndicator();\n      }\n    }\n    /** Shows the value indicator ui. */\n    _showValueIndicator() {\n      this._hostElement.classList.add('mdc-slider__thumb--with-indicator');\n    }\n    /** Hides the value indicator ui. */\n    _hideValueIndicator() {\n      this._hostElement.classList.remove('mdc-slider__thumb--with-indicator');\n    }\n    _getSibling() {\n      return this._slider._getThumb(this.thumbPosition === _MatThumb.START ? _MatThumb.END : _MatThumb.START);\n    }\n    /** Gets the value indicator container's native HTML element. */\n    _getValueIndicatorContainer() {\n      return this._valueIndicatorContainer?.nativeElement;\n    }\n    /** Gets the native HTML element of the slider thumb knob. */\n    _getKnob() {\n      return this._knob.nativeElement;\n    }\n    _isShowingAnyRipple() {\n      return this._isShowingRipple(this._hoverRippleRef) || this._isShowingRipple(this._focusRippleRef) || this._isShowingRipple(this._activeRippleRef);\n    }\n    static {\n      this.ɵfac = function MatSliderVisualThumb_Factory(t) {\n        return new (t || MatSliderVisualThumb)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MAT_SLIDER));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatSliderVisualThumb,\n        selectors: [[\"mat-slider-visual-thumb\"]],\n        viewQuery: function MatSliderVisualThumb_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(MatRipple, 5);\n            i0.ɵɵviewQuery(_c0, 5);\n            i0.ɵɵviewQuery(_c1, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._ripple = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._knob = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._valueIndicatorContainer = _t.first);\n          }\n        },\n        hostAttrs: [1, \"mdc-slider__thumb\", \"mat-mdc-slider-visual-thumb\"],\n        inputs: {\n          discrete: \"discrete\",\n          thumbPosition: \"thumbPosition\",\n          valueIndicatorText: \"valueIndicatorText\"\n        },\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: MAT_SLIDER_VISUAL_THUMB,\n          useExisting: MatSliderVisualThumb\n        }]), i0.ɵɵStandaloneFeature],\n        decls: 4,\n        vars: 2,\n        consts: [[\"knob\", \"\"], [\"valueIndicatorContainer\", \"\"], [1, \"mdc-slider__value-indicator-container\"], [1, \"mdc-slider__thumb-knob\"], [\"matRipple\", \"\", 1, \"mat-mdc-focus-indicator\", 3, \"matRippleDisabled\"], [1, \"mdc-slider__value-indicator\"], [1, \"mdc-slider__value-indicator-text\"]],\n        template: function MatSliderVisualThumb_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵtemplate(0, MatSliderVisualThumb_Conditional_0_Template, 5, 1, \"div\", 2);\n            i0.ɵɵelement(1, \"div\", 3, 0)(3, \"div\", 4);\n          }\n          if (rf & 2) {\n            i0.ɵɵconditional(ctx.discrete ? 0 : -1);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"matRippleDisabled\", true);\n          }\n        },\n        dependencies: [MatRipple],\n        styles: [\".mat-mdc-slider-visual-thumb .mat-ripple{height:100%;width:100%}.mat-mdc-slider .mdc-slider__tick-marks{justify-content:start}.mat-mdc-slider .mdc-slider__tick-marks .mdc-slider__tick-mark--active,.mat-mdc-slider .mdc-slider__tick-marks .mdc-slider__tick-mark--inactive{position:absolute;left:2px}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatSliderVisualThumb;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// TODO(wagnermaciel): maybe handle the following edge case:\n// 1. start dragging discrete slider\n// 2. tab to disable checkbox\n// 3. without ending drag, disable the slider\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nlet MatSlider = /*#__PURE__*/(() => {\n  class MatSlider {\n    /** Whether the slider is disabled. */\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(v) {\n      this._disabled = v;\n      const endInput = this._getInput(_MatThumb.END);\n      const startInput = this._getInput(_MatThumb.START);\n      if (endInput) {\n        endInput.disabled = this._disabled;\n      }\n      if (startInput) {\n        startInput.disabled = this._disabled;\n      }\n    }\n    /** Whether the slider displays a numeric value label upon pressing the thumb. */\n    get discrete() {\n      return this._discrete;\n    }\n    set discrete(v) {\n      this._discrete = v;\n      this._updateValueIndicatorUIs();\n    }\n    /** The minimum value that the slider can have. */\n    get min() {\n      return this._min;\n    }\n    set min(v) {\n      const min = isNaN(v) ? this._min : v;\n      if (this._min !== min) {\n        this._updateMin(min);\n      }\n    }\n    _updateMin(min) {\n      const prevMin = this._min;\n      this._min = min;\n      this._isRange ? this._updateMinRange({\n        old: prevMin,\n        new: min\n      }) : this._updateMinNonRange(min);\n      this._onMinMaxOrStepChange();\n    }\n    _updateMinRange(min) {\n      const endInput = this._getInput(_MatThumb.END);\n      const startInput = this._getInput(_MatThumb.START);\n      const oldEndValue = endInput.value;\n      const oldStartValue = startInput.value;\n      startInput.min = min.new;\n      endInput.min = Math.max(min.new, startInput.value);\n      startInput.max = Math.min(endInput.max, endInput.value);\n      startInput._updateWidthInactive();\n      endInput._updateWidthInactive();\n      min.new < min.old ? this._onTranslateXChangeBySideEffect(endInput, startInput) : this._onTranslateXChangeBySideEffect(startInput, endInput);\n      if (oldEndValue !== endInput.value) {\n        this._onValueChange(endInput);\n      }\n      if (oldStartValue !== startInput.value) {\n        this._onValueChange(startInput);\n      }\n    }\n    _updateMinNonRange(min) {\n      const input = this._getInput(_MatThumb.END);\n      if (input) {\n        const oldValue = input.value;\n        input.min = min;\n        input._updateThumbUIByValue();\n        this._updateTrackUI(input);\n        if (oldValue !== input.value) {\n          this._onValueChange(input);\n        }\n      }\n    }\n    /** The maximum value that the slider can have. */\n    get max() {\n      return this._max;\n    }\n    set max(v) {\n      const max = isNaN(v) ? this._max : v;\n      if (this._max !== max) {\n        this._updateMax(max);\n      }\n    }\n    _updateMax(max) {\n      const prevMax = this._max;\n      this._max = max;\n      this._isRange ? this._updateMaxRange({\n        old: prevMax,\n        new: max\n      }) : this._updateMaxNonRange(max);\n      this._onMinMaxOrStepChange();\n    }\n    _updateMaxRange(max) {\n      const endInput = this._getInput(_MatThumb.END);\n      const startInput = this._getInput(_MatThumb.START);\n      const oldEndValue = endInput.value;\n      const oldStartValue = startInput.value;\n      endInput.max = max.new;\n      startInput.max = Math.min(max.new, endInput.value);\n      endInput.min = startInput.value;\n      endInput._updateWidthInactive();\n      startInput._updateWidthInactive();\n      max.new > max.old ? this._onTranslateXChangeBySideEffect(startInput, endInput) : this._onTranslateXChangeBySideEffect(endInput, startInput);\n      if (oldEndValue !== endInput.value) {\n        this._onValueChange(endInput);\n      }\n      if (oldStartValue !== startInput.value) {\n        this._onValueChange(startInput);\n      }\n    }\n    _updateMaxNonRange(max) {\n      const input = this._getInput(_MatThumb.END);\n      if (input) {\n        const oldValue = input.value;\n        input.max = max;\n        input._updateThumbUIByValue();\n        this._updateTrackUI(input);\n        if (oldValue !== input.value) {\n          this._onValueChange(input);\n        }\n      }\n    }\n    /** The values at which the thumb will snap. */\n    get step() {\n      return this._step;\n    }\n    set step(v) {\n      const step = isNaN(v) ? this._step : v;\n      if (this._step !== step) {\n        this._updateStep(step);\n      }\n    }\n    _updateStep(step) {\n      this._step = step;\n      this._isRange ? this._updateStepRange() : this._updateStepNonRange();\n      this._onMinMaxOrStepChange();\n    }\n    _updateStepRange() {\n      const endInput = this._getInput(_MatThumb.END);\n      const startInput = this._getInput(_MatThumb.START);\n      const oldEndValue = endInput.value;\n      const oldStartValue = startInput.value;\n      const prevStartValue = startInput.value;\n      endInput.min = this._min;\n      startInput.max = this._max;\n      endInput.step = this._step;\n      startInput.step = this._step;\n      if (this._platform.SAFARI) {\n        endInput.value = endInput.value;\n        startInput.value = startInput.value;\n      }\n      endInput.min = Math.max(this._min, startInput.value);\n      startInput.max = Math.min(this._max, endInput.value);\n      startInput._updateWidthInactive();\n      endInput._updateWidthInactive();\n      endInput.value < prevStartValue ? this._onTranslateXChangeBySideEffect(startInput, endInput) : this._onTranslateXChangeBySideEffect(endInput, startInput);\n      if (oldEndValue !== endInput.value) {\n        this._onValueChange(endInput);\n      }\n      if (oldStartValue !== startInput.value) {\n        this._onValueChange(startInput);\n      }\n    }\n    _updateStepNonRange() {\n      const input = this._getInput(_MatThumb.END);\n      if (input) {\n        const oldValue = input.value;\n        input.step = this._step;\n        if (this._platform.SAFARI) {\n          input.value = input.value;\n        }\n        input._updateThumbUIByValue();\n        if (oldValue !== input.value) {\n          this._onValueChange(input);\n        }\n      }\n    }\n    constructor(_ngZone, _cdr, _elementRef, _dir, _globalRippleOptions, animationMode) {\n      this._ngZone = _ngZone;\n      this._cdr = _cdr;\n      this._elementRef = _elementRef;\n      this._dir = _dir;\n      this._globalRippleOptions = _globalRippleOptions;\n      this._disabled = false;\n      this._discrete = false;\n      /** Whether the slider displays tick marks along the slider track. */\n      this.showTickMarks = false;\n      this._min = 0;\n      /** Whether ripples are disabled in the slider. */\n      this.disableRipple = false;\n      this._max = 100;\n      this._step = 1;\n      /**\n       * Function that will be used to format the value before it is displayed\n       * in the thumb label. Can be used to format very large number in order\n       * for them to fit into the slider thumb.\n       */\n      this.displayWith = value => `${value}`;\n      this._rippleRadius = 24;\n      // The value indicator tooltip text for the visual slider thumb(s).\n      /** @docs-private */\n      this.startValueIndicatorText = '';\n      /** @docs-private */\n      this.endValueIndicatorText = '';\n      this._isRange = false;\n      /** Whether the slider is rtl. */\n      this._isRtl = false;\n      this._hasViewInitialized = false;\n      /**\n       * The width of the tick mark track.\n       * The tick mark track width is different from full track width\n       */\n      this._tickMarkTrackWidth = 0;\n      this._hasAnimation = false;\n      this._resizeTimer = null;\n      this._platform = inject(Platform);\n      /** The radius of the native slider's knob. AFAIK there is no way to avoid hardcoding this. */\n      this._knobRadius = 8;\n      /** Whether or not the slider thumbs overlap. */\n      this._thumbsOverlap = false;\n      this._noopAnimations = animationMode === 'NoopAnimations';\n      this._dirChangeSubscription = this._dir.change.subscribe(() => this._onDirChange());\n      this._isRtl = this._dir.value === 'rtl';\n    }\n    ngAfterViewInit() {\n      if (this._platform.isBrowser) {\n        this._updateDimensions();\n      }\n      const eInput = this._getInput(_MatThumb.END);\n      const sInput = this._getInput(_MatThumb.START);\n      this._isRange = !!eInput && !!sInput;\n      this._cdr.detectChanges();\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        _validateInputs(this._isRange, this._getInput(_MatThumb.END), this._getInput(_MatThumb.START));\n      }\n      const thumb = this._getThumb(_MatThumb.END);\n      this._rippleRadius = thumb._ripple.radius;\n      this._inputPadding = this._rippleRadius - this._knobRadius;\n      this._isRange ? this._initUIRange(eInput, sInput) : this._initUINonRange(eInput);\n      this._updateTrackUI(eInput);\n      this._updateTickMarkUI();\n      this._updateTickMarkTrackUI();\n      this._observeHostResize();\n      this._cdr.detectChanges();\n    }\n    _initUINonRange(eInput) {\n      eInput.initProps();\n      eInput.initUI();\n      this._updateValueIndicatorUI(eInput);\n      this._hasViewInitialized = true;\n      eInput._updateThumbUIByValue();\n    }\n    _initUIRange(eInput, sInput) {\n      eInput.initProps();\n      eInput.initUI();\n      sInput.initProps();\n      sInput.initUI();\n      eInput._updateMinMax();\n      sInput._updateMinMax();\n      eInput._updateStaticStyles();\n      sInput._updateStaticStyles();\n      this._updateValueIndicatorUIs();\n      this._hasViewInitialized = true;\n      eInput._updateThumbUIByValue();\n      sInput._updateThumbUIByValue();\n    }\n    ngOnDestroy() {\n      this._dirChangeSubscription.unsubscribe();\n      this._resizeObserver?.disconnect();\n      this._resizeObserver = null;\n    }\n    /** Handles updating the slider ui after a dir change. */\n    _onDirChange() {\n      this._isRtl = this._dir.value === 'rtl';\n      this._isRange ? this._onDirChangeRange() : this._onDirChangeNonRange();\n      this._updateTickMarkUI();\n    }\n    _onDirChangeRange() {\n      const endInput = this._getInput(_MatThumb.END);\n      const startInput = this._getInput(_MatThumb.START);\n      endInput._setIsLeftThumb();\n      startInput._setIsLeftThumb();\n      endInput.translateX = endInput._calcTranslateXByValue();\n      startInput.translateX = startInput._calcTranslateXByValue();\n      endInput._updateStaticStyles();\n      startInput._updateStaticStyles();\n      endInput._updateWidthInactive();\n      startInput._updateWidthInactive();\n      endInput._updateThumbUIByValue();\n      startInput._updateThumbUIByValue();\n    }\n    _onDirChangeNonRange() {\n      const input = this._getInput(_MatThumb.END);\n      input._updateThumbUIByValue();\n    }\n    /** Starts observing and updating the slider if the host changes its size. */\n    _observeHostResize() {\n      if (typeof ResizeObserver === 'undefined' || !ResizeObserver) {\n        return;\n      }\n      this._ngZone.runOutsideAngular(() => {\n        this._resizeObserver = new ResizeObserver(() => {\n          if (this._isActive()) {\n            return;\n          }\n          if (this._resizeTimer) {\n            clearTimeout(this._resizeTimer);\n          }\n          this._onResize();\n        });\n        this._resizeObserver.observe(this._elementRef.nativeElement);\n      });\n    }\n    /** Whether any of the thumbs are currently active. */\n    _isActive() {\n      return this._getThumb(_MatThumb.START)._isActive || this._getThumb(_MatThumb.END)._isActive;\n    }\n    _getValue(thumbPosition = _MatThumb.END) {\n      const input = this._getInput(thumbPosition);\n      if (!input) {\n        return this.min;\n      }\n      return input.value;\n    }\n    _skipUpdate() {\n      return !!(this._getInput(_MatThumb.START)?._skipUIUpdate || this._getInput(_MatThumb.END)?._skipUIUpdate);\n    }\n    /** Stores the slider dimensions. */\n    _updateDimensions() {\n      this._cachedWidth = this._elementRef.nativeElement.offsetWidth;\n      this._cachedLeft = this._elementRef.nativeElement.getBoundingClientRect().left;\n    }\n    /** Sets the styles for the active portion of the track. */\n    _setTrackActiveStyles(styles) {\n      const trackStyle = this._trackActive.nativeElement.style;\n      trackStyle.left = styles.left;\n      trackStyle.right = styles.right;\n      trackStyle.transformOrigin = styles.transformOrigin;\n      trackStyle.transform = styles.transform;\n    }\n    /** Returns the translateX positioning for a tick mark based on it's index. */\n    _calcTickMarkTransform(index) {\n      // TODO(wagnermaciel): See if we can avoid doing this and just using flex to position these.\n      const translateX = index * (this._tickMarkTrackWidth / (this._tickMarks.length - 1));\n      return `translateX(${translateX}px`;\n    }\n    // Handlers for updating the slider ui.\n    _onTranslateXChange(source) {\n      if (!this._hasViewInitialized) {\n        return;\n      }\n      this._updateThumbUI(source);\n      this._updateTrackUI(source);\n      this._updateOverlappingThumbUI(source);\n    }\n    _onTranslateXChangeBySideEffect(input1, input2) {\n      if (!this._hasViewInitialized) {\n        return;\n      }\n      input1._updateThumbUIByValue();\n      input2._updateThumbUIByValue();\n    }\n    _onValueChange(source) {\n      if (!this._hasViewInitialized) {\n        return;\n      }\n      this._updateValueIndicatorUI(source);\n      this._updateTickMarkUI();\n      this._cdr.detectChanges();\n    }\n    _onMinMaxOrStepChange() {\n      if (!this._hasViewInitialized) {\n        return;\n      }\n      this._updateTickMarkUI();\n      this._updateTickMarkTrackUI();\n      this._cdr.markForCheck();\n    }\n    _onResize() {\n      if (!this._hasViewInitialized) {\n        return;\n      }\n      this._updateDimensions();\n      if (this._isRange) {\n        const eInput = this._getInput(_MatThumb.END);\n        const sInput = this._getInput(_MatThumb.START);\n        eInput._updateThumbUIByValue();\n        sInput._updateThumbUIByValue();\n        eInput._updateStaticStyles();\n        sInput._updateStaticStyles();\n        eInput._updateMinMax();\n        sInput._updateMinMax();\n        eInput._updateWidthInactive();\n        sInput._updateWidthInactive();\n      } else {\n        const eInput = this._getInput(_MatThumb.END);\n        if (eInput) {\n          eInput._updateThumbUIByValue();\n        }\n      }\n      this._updateTickMarkUI();\n      this._updateTickMarkTrackUI();\n      this._cdr.detectChanges();\n    }\n    /** Returns true if the slider knobs are overlapping one another. */\n    _areThumbsOverlapping() {\n      const startInput = this._getInput(_MatThumb.START);\n      const endInput = this._getInput(_MatThumb.END);\n      if (!startInput || !endInput) {\n        return false;\n      }\n      return endInput.translateX - startInput.translateX < 20;\n    }\n    /**\n     * Updates the class names of overlapping slider thumbs so\n     * that the current active thumb is styled to be on \"top\".\n     */\n    _updateOverlappingThumbClassNames(source) {\n      const sibling = source.getSibling();\n      const sourceThumb = this._getThumb(source.thumbPosition);\n      const siblingThumb = this._getThumb(sibling.thumbPosition);\n      siblingThumb._hostElement.classList.remove('mdc-slider__thumb--top');\n      sourceThumb._hostElement.classList.toggle('mdc-slider__thumb--top', this._thumbsOverlap);\n    }\n    /** Updates the UI of slider thumbs when they begin or stop overlapping. */\n    _updateOverlappingThumbUI(source) {\n      if (!this._isRange || this._skipUpdate()) {\n        return;\n      }\n      if (this._thumbsOverlap !== this._areThumbsOverlapping()) {\n        this._thumbsOverlap = !this._thumbsOverlap;\n        this._updateOverlappingThumbClassNames(source);\n      }\n    }\n    // _MatThumb styles update conditions\n    //\n    // 1. TranslateX, resize, or dir change\n    //    - Reason: The thumb styles need to be updated according to the new translateX.\n    // 2. Min, max, or step\n    //    - Reason: The value may have silently changed.\n    /** Updates the translateX of the given thumb. */\n    _updateThumbUI(source) {\n      if (this._skipUpdate()) {\n        return;\n      }\n      const thumb = this._getThumb(source.thumbPosition === _MatThumb.END ? _MatThumb.END : _MatThumb.START);\n      thumb._hostElement.style.transform = `translateX(${source.translateX}px)`;\n    }\n    // Value indicator text update conditions\n    //\n    // 1. Value\n    //    - Reason: The value displayed needs to be updated.\n    // 2. Min, max, or step\n    //    - Reason: The value may have silently changed.\n    /** Updates the value indicator tooltip ui for the given thumb. */\n    _updateValueIndicatorUI(source) {\n      if (this._skipUpdate()) {\n        return;\n      }\n      const valuetext = this.displayWith(source.value);\n      this._hasViewInitialized ? source._valuetext.set(valuetext) : source._hostElement.setAttribute('aria-valuetext', valuetext);\n      if (this.discrete) {\n        source.thumbPosition === _MatThumb.START ? this.startValueIndicatorText = valuetext : this.endValueIndicatorText = valuetext;\n        const visualThumb = this._getThumb(source.thumbPosition);\n        valuetext.length < 3 ? visualThumb._hostElement.classList.add('mdc-slider__thumb--short-value') : visualThumb._hostElement.classList.remove('mdc-slider__thumb--short-value');\n      }\n    }\n    /** Updates all value indicator UIs in the slider. */\n    _updateValueIndicatorUIs() {\n      const eInput = this._getInput(_MatThumb.END);\n      const sInput = this._getInput(_MatThumb.START);\n      if (eInput) {\n        this._updateValueIndicatorUI(eInput);\n      }\n      if (sInput) {\n        this._updateValueIndicatorUI(sInput);\n      }\n    }\n    // Update Tick Mark Track Width\n    //\n    // 1. Min, max, or step\n    //    - Reason: The maximum reachable value may have changed.\n    //    - Side note: The maximum reachable value is different from the maximum value set by the\n    //      user. For example, a slider with [min: 5, max: 100, step: 10] would have a maximum\n    //      reachable value of 95.\n    // 2. Resize\n    //    - Reason: The position for the maximum reachable value needs to be recalculated.\n    /** Updates the width of the tick mark track. */\n    _updateTickMarkTrackUI() {\n      if (!this.showTickMarks || this._skipUpdate()) {\n        return;\n      }\n      const step = this._step && this._step > 0 ? this._step : 1;\n      const maxValue = Math.floor(this.max / step) * step;\n      const percentage = (maxValue - this.min) / (this.max - this.min);\n      this._tickMarkTrackWidth = this._cachedWidth * percentage - 6;\n    }\n    // Track active update conditions\n    //\n    // 1. TranslateX\n    //    - Reason: The track active should line up with the new thumb position.\n    // 2. Min or max\n    //    - Reason #1: The 'active' percentage needs to be recalculated.\n    //    - Reason #2: The value may have silently changed.\n    // 3. Step\n    //    - Reason: The value may have silently changed causing the thumb(s) to shift.\n    // 4. Dir change\n    //    - Reason: The track active will need to be updated according to the new thumb position(s).\n    // 5. Resize\n    //    - Reason: The total width the 'active' tracks translateX is based on has changed.\n    /** Updates the scale on the active portion of the track. */\n    _updateTrackUI(source) {\n      if (this._skipUpdate()) {\n        return;\n      }\n      this._isRange ? this._updateTrackUIRange(source) : this._updateTrackUINonRange(source);\n    }\n    _updateTrackUIRange(source) {\n      const sibling = source.getSibling();\n      if (!sibling || !this._cachedWidth) {\n        return;\n      }\n      const activePercentage = Math.abs(sibling.translateX - source.translateX) / this._cachedWidth;\n      if (source._isLeftThumb && this._cachedWidth) {\n        this._setTrackActiveStyles({\n          left: 'auto',\n          right: `${this._cachedWidth - sibling.translateX}px`,\n          transformOrigin: 'right',\n          transform: `scaleX(${activePercentage})`\n        });\n      } else {\n        this._setTrackActiveStyles({\n          left: `${sibling.translateX}px`,\n          right: 'auto',\n          transformOrigin: 'left',\n          transform: `scaleX(${activePercentage})`\n        });\n      }\n    }\n    _updateTrackUINonRange(source) {\n      this._isRtl ? this._setTrackActiveStyles({\n        left: 'auto',\n        right: '0px',\n        transformOrigin: 'right',\n        transform: `scaleX(${1 - source.fillPercentage})`\n      }) : this._setTrackActiveStyles({\n        left: '0px',\n        right: 'auto',\n        transformOrigin: 'left',\n        transform: `scaleX(${source.fillPercentage})`\n      });\n    }\n    // Tick mark update conditions\n    //\n    // 1. Value\n    //    - Reason: a tick mark which was once active might now be inactive or vice versa.\n    // 2. Min, max, or step\n    //    - Reason #1: the number of tick marks may have changed.\n    //    - Reason #2: The value may have silently changed.\n    /** Updates the dots along the slider track. */\n    _updateTickMarkUI() {\n      if (!this.showTickMarks || this.step === undefined || this.min === undefined || this.max === undefined) {\n        return;\n      }\n      const step = this.step > 0 ? this.step : 1;\n      this._isRange ? this._updateTickMarkUIRange(step) : this._updateTickMarkUINonRange(step);\n      if (this._isRtl) {\n        this._tickMarks.reverse();\n      }\n    }\n    _updateTickMarkUINonRange(step) {\n      const value = this._getValue();\n      let numActive = Math.max(Math.round((value - this.min) / step), 0);\n      let numInactive = Math.max(Math.round((this.max - value) / step), 0);\n      this._isRtl ? numActive++ : numInactive++;\n      this._tickMarks = Array(numActive).fill(_MatTickMark.ACTIVE).concat(Array(numInactive).fill(_MatTickMark.INACTIVE));\n    }\n    _updateTickMarkUIRange(step) {\n      const endValue = this._getValue();\n      const startValue = this._getValue(_MatThumb.START);\n      const numInactiveBeforeStartThumb = Math.max(Math.round((startValue - this.min) / step), 0);\n      const numActive = Math.max(Math.round((endValue - startValue) / step) + 1, 0);\n      const numInactiveAfterEndThumb = Math.max(Math.round((this.max - endValue) / step), 0);\n      this._tickMarks = Array(numInactiveBeforeStartThumb).fill(_MatTickMark.INACTIVE).concat(Array(numActive).fill(_MatTickMark.ACTIVE), Array(numInactiveAfterEndThumb).fill(_MatTickMark.INACTIVE));\n    }\n    /** Gets the slider thumb input of the given thumb position. */\n    _getInput(thumbPosition) {\n      if (thumbPosition === _MatThumb.END && this._input) {\n        return this._input;\n      }\n      if (this._inputs?.length) {\n        return thumbPosition === _MatThumb.START ? this._inputs.first : this._inputs.last;\n      }\n      return;\n    }\n    /** Gets the slider thumb HTML input element of the given thumb position. */\n    _getThumb(thumbPosition) {\n      return thumbPosition === _MatThumb.END ? this._thumbs?.last : this._thumbs?.first;\n    }\n    _setTransition(withAnimation) {\n      this._hasAnimation = !this._platform.IOS && withAnimation && !this._noopAnimations;\n      this._elementRef.nativeElement.classList.toggle('mat-mdc-slider-with-animation', this._hasAnimation);\n    }\n    /** Whether the given pointer event occurred within the bounds of the slider pointer's DOM Rect. */\n    _isCursorOnSliderThumb(event, rect) {\n      const radius = rect.width / 2;\n      const centerX = rect.x + radius;\n      const centerY = rect.y + radius;\n      const dx = event.clientX - centerX;\n      const dy = event.clientY - centerY;\n      return Math.pow(dx, 2) + Math.pow(dy, 2) < Math.pow(radius, 2);\n    }\n    static {\n      this.ɵfac = function MatSlider_Factory(t) {\n        return new (t || MatSlider)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Directionality, 8), i0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatSlider,\n        selectors: [[\"mat-slider\"]],\n        contentQueries: function MatSlider_ContentQueries(rf, ctx, dirIndex) {\n          if (rf & 1) {\n            i0.ɵɵcontentQuery(dirIndex, MAT_SLIDER_THUMB, 5);\n            i0.ɵɵcontentQuery(dirIndex, MAT_SLIDER_RANGE_THUMB, 4);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._input = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputs = _t);\n          }\n        },\n        viewQuery: function MatSlider_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c2, 5);\n            i0.ɵɵviewQuery(MAT_SLIDER_VISUAL_THUMB, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._trackActive = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._thumbs = _t);\n          }\n        },\n        hostAttrs: [1, \"mat-mdc-slider\", \"mdc-slider\"],\n        hostVars: 12,\n        hostBindings: function MatSlider_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassMap(\"mat-\" + (ctx.color || \"primary\"));\n            i0.ɵɵclassProp(\"mdc-slider--range\", ctx._isRange)(\"mdc-slider--disabled\", ctx.disabled)(\"mdc-slider--discrete\", ctx.discrete)(\"mdc-slider--tick-marks\", ctx.showTickMarks)(\"_mat-animation-noopable\", ctx._noopAnimations);\n          }\n        },\n        inputs: {\n          disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n          discrete: [2, \"discrete\", \"discrete\", booleanAttribute],\n          showTickMarks: [2, \"showTickMarks\", \"showTickMarks\", booleanAttribute],\n          min: [2, \"min\", \"min\", numberAttribute],\n          color: \"color\",\n          disableRipple: [2, \"disableRipple\", \"disableRipple\", booleanAttribute],\n          max: [2, \"max\", \"max\", numberAttribute],\n          step: [2, \"step\", \"step\", numberAttribute],\n          displayWith: \"displayWith\"\n        },\n        exportAs: [\"matSlider\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([{\n          provide: MAT_SLIDER,\n          useExisting: MatSlider\n        }]), i0.ɵɵInputTransformsFeature, i0.ɵɵStandaloneFeature],\n        ngContentSelectors: _c3,\n        decls: 9,\n        vars: 5,\n        consts: [[\"trackActive\", \"\"], [\"tickMarkContainer\", \"\"], [1, \"mdc-slider__track\"], [1, \"mdc-slider__track--inactive\"], [1, \"mdc-slider__track--active\"], [1, \"mdc-slider__track--active_fill\"], [1, \"mdc-slider__tick-marks\"], [3, \"discrete\", \"thumbPosition\", \"valueIndicatorText\"], [3, \"class\", \"transform\"]],\n        template: function MatSlider_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵprojection(0);\n            i0.ɵɵelementStart(1, \"div\", 2);\n            i0.ɵɵelement(2, \"div\", 3);\n            i0.ɵɵelementStart(3, \"div\", 4);\n            i0.ɵɵelement(4, \"div\", 5, 0);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(6, MatSlider_Conditional_6_Template, 3, 1, \"div\", 6);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(7, MatSlider_Conditional_7_Template, 1, 3, \"mat-slider-visual-thumb\", 7);\n            i0.ɵɵelement(8, \"mat-slider-visual-thumb\", 7);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(6);\n            i0.ɵɵconditional(ctx.showTickMarks ? 6 : -1);\n            i0.ɵɵadvance();\n            i0.ɵɵconditional(ctx._isRange ? 7 : -1);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"discrete\", ctx.discrete)(\"thumbPosition\", 2)(\"valueIndicatorText\", ctx.endValueIndicatorText);\n          }\n        },\n        dependencies: [MatSliderVisualThumb],\n        styles: [\".mdc-slider__track{position:absolute;top:50%;transform:translateY(-50%);width:100%;pointer-events:none;height:var(--mdc-slider-inactive-track-height)}.mdc-slider__track--active,.mdc-slider__track--inactive{display:flex;height:100%;position:absolute;width:100%}.mdc-slider__track--active{overflow:hidden;border-radius:var(--mdc-slider-active-track-shape);height:var(--mdc-slider-active-track-height);top:calc((var(--mdc-slider-inactive-track-height) - var(--mdc-slider-active-track-height))/2)}.mdc-slider__track--active_fill{border-top-style:solid;box-sizing:border-box;height:100%;width:100%;position:relative;transform-origin:left;transition:transform 80ms ease;border-color:var(--mdc-slider-active-track-color);border-top-width:var(--mdc-slider-active-track-height)}.mdc-slider--disabled .mdc-slider__track--active_fill{border-color:var(--mdc-slider-disabled-active-track-color)}[dir=rtl] .mdc-slider__track--active_fill{-webkit-transform-origin:right;transform-origin:right}.mdc-slider__track--inactive{left:0;top:0;opacity:.24;background-color:var(--mdc-slider-inactive-track-color);height:var(--mdc-slider-inactive-track-height);border-radius:var(--mdc-slider-inactive-track-shape)}.mdc-slider--disabled .mdc-slider__track--inactive{background-color:var(--mdc-slider-disabled-inactive-track-color);opacity:.24}.mdc-slider__track--inactive::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.cdk-high-contrast-active .mdc-slider__track--inactive::before{border-color:CanvasText}.mdc-slider__value-indicator-container{bottom:44px;left:50%;pointer-events:none;position:absolute;transform:translateX(-50%);transform:var(--mat-slider-value-indicator-container-transform)}.mdc-slider__thumb--with-indicator .mdc-slider__value-indicator-container{pointer-events:auto}.mdc-slider__value-indicator{display:flex;align-items:center;border-radius:4px;height:32px;padding:0 12px;transform:scale(0);transform-origin:bottom;opacity:1;transition:transform 100ms cubic-bezier(0.4, 0, 1, 1);word-break:normal;background-color:var(--mdc-slider-label-container-color);color:var(--mdc-slider-label-label-text-color);width:var(--mat-slider-value-indicator-width);height:var(--mat-slider-value-indicator-height);padding:var(--mat-slider-value-indicator-padding);opacity:var(--mat-slider-value-indicator-opacity);border-radius:var(--mat-slider-value-indicator-border-radius)}.mdc-slider__thumb--with-indicator .mdc-slider__value-indicator{transition:transform 100ms cubic-bezier(0, 0, 0.2, 1);transform:scale(1)}.mdc-slider__value-indicator::before{border-left:6px solid rgba(0,0,0,0);border-right:6px solid rgba(0,0,0,0);border-top:6px solid;bottom:-5px;content:\\\"\\\";height:0;left:50%;position:absolute;transform:translateX(-50%);width:0;display:var(--mat-slider-value-indicator-caret-display);border-top-color:var(--mdc-slider-label-container-color)}.mdc-slider__value-indicator::after{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.cdk-high-contrast-active .mdc-slider__value-indicator::after{border-color:CanvasText}.mdc-slider__value-indicator-text{text-align:center;width:var(--mat-slider-value-indicator-width);transform:var(--mat-slider-value-indicator-text-transform);font-family:var(--mdc-slider-label-label-text-font);font-size:var(--mdc-slider-label-label-text-size);font-weight:var(--mdc-slider-label-label-text-weight);line-height:var(--mdc-slider-label-label-text-line-height);letter-spacing:var(--mdc-slider-label-label-text-tracking)}.mdc-slider__thumb{-webkit-user-select:none;user-select:none;display:flex;left:-24px;outline:none;position:absolute;height:48px;width:48px;pointer-events:none}.mdc-slider--discrete .mdc-slider__thumb{transition:transform 80ms ease}.mdc-slider--disabled .mdc-slider__thumb{pointer-events:none}.mdc-slider__thumb--top{z-index:1}.mdc-slider__thumb-knob{position:absolute;box-sizing:border-box;left:50%;top:50%;transform:translate(-50%, -50%);border-style:solid;width:var(--mdc-slider-handle-width);height:var(--mdc-slider-handle-height);border-width:calc(var(--mdc-slider-handle-height)/2) calc(var(--mdc-slider-handle-width)/2);box-shadow:var(--mdc-slider-handle-elevation);background-color:var(--mdc-slider-handle-color);border-color:var(--mdc-slider-handle-color);border-radius:var(--mdc-slider-handle-shape)}.mdc-slider__thumb:hover .mdc-slider__thumb-knob{background-color:var(--mdc-slider-hover-handle-color);border-color:var(--mdc-slider-hover-handle-color)}.mdc-slider__thumb--focused .mdc-slider__thumb-knob{background-color:var(--mdc-slider-focus-handle-color);border-color:var(--mdc-slider-focus-handle-color)}.mdc-slider--disabled .mdc-slider__thumb-knob{background-color:var(--mdc-slider-disabled-handle-color);border-color:var(--mdc-slider-disabled-handle-color)}.mdc-slider__thumb--top .mdc-slider__thumb-knob,.mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border:solid 1px #fff;box-sizing:content-box;border-color:var(--mdc-slider-with-overlap-handle-outline-color);border-width:var(--mdc-slider-with-overlap-handle-outline-width)}.mdc-slider__tick-marks{align-items:center;box-sizing:border-box;display:flex;height:100%;justify-content:space-between;padding:0 1px;position:absolute;width:100%}.mdc-slider__tick-mark--active,.mdc-slider__tick-mark--inactive{width:var(--mdc-slider-with-tick-marks-container-size);height:var(--mdc-slider-with-tick-marks-container-size);border-radius:var(--mdc-slider-with-tick-marks-container-shape)}.mdc-slider__tick-mark--inactive{opacity:var(--mdc-slider-with-tick-marks-inactive-container-opacity);background-color:var(--mdc-slider-with-tick-marks-inactive-container-color)}.mdc-slider--disabled .mdc-slider__tick-mark--inactive{opacity:var(--mdc-slider-with-tick-marks-inactive-container-opacity);background-color:var(--mdc-slider-with-tick-marks-disabled-container-color)}.mdc-slider__tick-mark--active{opacity:var(--mdc-slider-with-tick-marks-active-container-opacity);background-color:var(--mdc-slider-with-tick-marks-active-container-color)}.mdc-slider__input{cursor:pointer;left:2px;margin:0;height:44px;opacity:0;position:absolute;top:2px;width:44px;box-sizing:content-box}.mdc-slider__input.mat-mdc-slider-input-no-pointer-events{pointer-events:none}.mdc-slider__input.mat-slider__right-input{left:auto;right:0}.mat-mdc-slider{display:inline-block;box-sizing:border-box;outline:none;vertical-align:middle;cursor:pointer;height:48px;margin:0 8px;position:relative;touch-action:pan-y;width:auto;min-width:112px;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-slider.mdc-slider--disabled{cursor:auto;opacity:.38}.mat-mdc-slider .mdc-slider__thumb,.mat-mdc-slider .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__thumb,.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__track--active_fill{transition-duration:80ms}.mat-mdc-slider.mdc-slider--discrete .mdc-slider__thumb,.mat-mdc-slider.mdc-slider--discrete .mdc-slider__track--active_fill{transition-duration:0ms}.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__thumb,.mat-mdc-slider.mat-mdc-slider-with-animation .mdc-slider__track--active_fill{transition-duration:80ms}.mat-mdc-slider .mat-ripple .mat-ripple-element{background-color:var(--mat-slider-ripple-color)}.mat-mdc-slider .mat-ripple .mat-mdc-slider-hover-ripple{background-color:var(--mat-slider-hover-state-layer-color)}.mat-mdc-slider .mat-ripple .mat-mdc-slider-focus-ripple,.mat-mdc-slider .mat-ripple .mat-mdc-slider-active-ripple{background-color:var(--mat-slider-focus-state-layer-color)}.mat-mdc-slider._mat-animation-noopable.mdc-slider--discrete .mdc-slider__thumb,.mat-mdc-slider._mat-animation-noopable.mdc-slider--discrete .mdc-slider__track--active_fill,.mat-mdc-slider._mat-animation-noopable .mdc-slider__value-indicator{transition:none}.mat-mdc-slider .mat-mdc-focus-indicator::before{border-radius:50%}.mdc-slider__thumb--focused .mat-mdc-focus-indicator::before{content:\\\"\\\"}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatSlider;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Ensures that there is not an invalid configuration for the slider thumb inputs. */\nfunction _validateInputs(isRange, endInputElement, startInputElement) {\n  const startValid = !isRange || startInputElement?._hostElement.hasAttribute('matSliderStartThumb');\n  const endValid = endInputElement._hostElement.hasAttribute(isRange ? 'matSliderEndThumb' : 'matSliderThumb');\n  if (!startValid || !endValid) {\n    _throwInvalidInputConfigurationError();\n  }\n}\nfunction _throwInvalidInputConfigurationError() {\n  throw Error(`Invalid slider thumb input configuration!\n\n   Valid configurations are as follows:\n\n     <mat-slider>\n       <input matSliderThumb>\n     </mat-slider>\n\n     or\n\n     <mat-slider>\n       <input matSliderStartThumb>\n       <input matSliderEndThumb>\n     </mat-slider>\n   `);\n}\n\n/**\n * Provider that allows the slider thumb to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_SLIDER_THUMB_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatSliderThumb),\n  multi: true\n};\n/**\n * Provider that allows the range slider thumb to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_SLIDER_RANGE_THUMB_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatSliderRangeThumb),\n  multi: true\n};\n/**\n * Directive that adds slider-specific behaviors to an input element inside `<mat-slider>`.\n * Up to two may be placed inside of a `<mat-slider>`.\n *\n * If one is used, the selector `matSliderThumb` must be used, and the outcome will be a normal\n * slider. If two are used, the selectors `matSliderStartThumb` and `matSliderEndThumb` must be\n * used, and the outcome will be a range slider with two slider thumbs.\n */\nlet MatSliderThumb = /*#__PURE__*/(() => {\n  class MatSliderThumb {\n    get value() {\n      return numberAttribute(this._hostElement.value, 0);\n    }\n    set value(value) {\n      value = isNaN(value) ? 0 : value;\n      const stringValue = value + '';\n      if (!this._hasSetInitialValue) {\n        this._initialValue = stringValue;\n        return;\n      }\n      if (this._isActive) {\n        return;\n      }\n      this._setValue(stringValue);\n    }\n    /**\n     * Handles programmatic value setting. This has been split out to\n     * allow the range thumb to override it and add additional necessary logic.\n     */\n    _setValue(value) {\n      this._hostElement.value = value;\n      this._updateThumbUIByValue();\n      this._slider._onValueChange(this);\n      this._cdr.detectChanges();\n      this._slider._cdr.markForCheck();\n    }\n    /**\n     * The current translateX in px of the slider visual thumb.\n     * @docs-private\n     */\n    get translateX() {\n      if (this._slider.min >= this._slider.max) {\n        this._translateX = this._tickMarkOffset;\n        return this._translateX;\n      }\n      if (this._translateX === undefined) {\n        this._translateX = this._calcTranslateXByValue();\n      }\n      return this._translateX;\n    }\n    set translateX(v) {\n      this._translateX = v;\n    }\n    /** @docs-private */\n    get min() {\n      return numberAttribute(this._hostElement.min, 0);\n    }\n    set min(v) {\n      this._hostElement.min = v + '';\n      this._cdr.detectChanges();\n    }\n    /** @docs-private */\n    get max() {\n      return numberAttribute(this._hostElement.max, 0);\n    }\n    set max(v) {\n      this._hostElement.max = v + '';\n      this._cdr.detectChanges();\n    }\n    get step() {\n      return numberAttribute(this._hostElement.step, 0);\n    }\n    set step(v) {\n      this._hostElement.step = v + '';\n      this._cdr.detectChanges();\n    }\n    /** @docs-private */\n    get disabled() {\n      return booleanAttribute(this._hostElement.disabled);\n    }\n    set disabled(v) {\n      this._hostElement.disabled = v;\n      this._cdr.detectChanges();\n      if (this._slider.disabled !== this.disabled) {\n        this._slider.disabled = this.disabled;\n      }\n    }\n    /** The percentage of the slider that coincides with the value. */\n    get percentage() {\n      if (this._slider.min >= this._slider.max) {\n        return this._slider._isRtl ? 1 : 0;\n      }\n      return (this.value - this._slider.min) / (this._slider.max - this._slider.min);\n    }\n    /** @docs-private */\n    get fillPercentage() {\n      if (!this._slider._cachedWidth) {\n        return this._slider._isRtl ? 1 : 0;\n      }\n      if (this._translateX === 0) {\n        return 0;\n      }\n      return this.translateX / this._slider._cachedWidth;\n    }\n    /** Used to relay updates to _isFocused to the slider visual thumbs. */\n    _setIsFocused(v) {\n      this._isFocused = v;\n    }\n    constructor(_ngZone, _elementRef, _cdr, _slider) {\n      this._ngZone = _ngZone;\n      this._elementRef = _elementRef;\n      this._cdr = _cdr;\n      this._slider = _slider;\n      /** Event emitted when the `value` is changed. */\n      this.valueChange = new EventEmitter();\n      /** Event emitted when the slider thumb starts being dragged. */\n      this.dragStart = new EventEmitter();\n      /** Event emitted when the slider thumb stops being dragged. */\n      this.dragEnd = new EventEmitter();\n      /**\n       * Indicates whether this thumb is the start or end thumb.\n       * @docs-private\n       */\n      this.thumbPosition = _MatThumb.END;\n      /** The aria-valuetext string representation of the input's value. */\n      this._valuetext = signal('');\n      /** The radius of a native html slider's knob. */\n      this._knobRadius = 8;\n      /** The distance in px from the start of the slider track to the first tick mark. */\n      this._tickMarkOffset = 3;\n      /** Whether user's cursor is currently in a mouse down state on the input. */\n      this._isActive = false;\n      /** Whether the input is currently focused (either by tab or after clicking). */\n      this._isFocused = false;\n      /**\n       * Whether the initial value has been set.\n       * This exists because the initial value cannot be immediately set because the min and max\n       * must first be relayed from the parent MatSlider component, which can only happen later\n       * in the component lifecycle.\n       */\n      this._hasSetInitialValue = false;\n      /** Emits when the component is destroyed. */\n      this._destroyed = new Subject();\n      /**\n       * Indicates whether UI updates should be skipped.\n       *\n       * This flag is used to avoid flickering\n       * when correcting values on pointer up/down.\n       */\n      this._skipUIUpdate = false;\n      /** Callback called when the slider input has been touched. */\n      this._onTouchedFn = () => {};\n      /**\n       * Whether the NgModel has been initialized.\n       *\n       * This flag is used to ignore ghost null calls to\n       * writeValue which can break slider initialization.\n       *\n       * See https://github.com/angular/angular/issues/14988.\n       */\n      this._isControlInitialized = false;\n      this._platform = inject(Platform);\n      this._hostElement = _elementRef.nativeElement;\n      this._ngZone.runOutsideAngular(() => {\n        this._hostElement.addEventListener('pointerdown', this._onPointerDown.bind(this));\n        this._hostElement.addEventListener('pointermove', this._onPointerMove.bind(this));\n        this._hostElement.addEventListener('pointerup', this._onPointerUp.bind(this));\n      });\n    }\n    ngOnDestroy() {\n      this._hostElement.removeEventListener('pointerdown', this._onPointerDown);\n      this._hostElement.removeEventListener('pointermove', this._onPointerMove);\n      this._hostElement.removeEventListener('pointerup', this._onPointerUp);\n      this._destroyed.next();\n      this._destroyed.complete();\n      this.dragStart.complete();\n      this.dragEnd.complete();\n    }\n    /** @docs-private */\n    initProps() {\n      this._updateWidthInactive();\n      // If this or the parent slider is disabled, just make everything disabled.\n      if (this.disabled !== this._slider.disabled) {\n        // The MatSlider setter for disabled will relay this and disable both inputs.\n        this._slider.disabled = true;\n      }\n      this.step = this._slider.step;\n      this.min = this._slider.min;\n      this.max = this._slider.max;\n      this._initValue();\n    }\n    /** @docs-private */\n    initUI() {\n      this._updateThumbUIByValue();\n    }\n    _initValue() {\n      this._hasSetInitialValue = true;\n      if (this._initialValue === undefined) {\n        this.value = this._getDefaultValue();\n      } else {\n        this._hostElement.value = this._initialValue;\n        this._updateThumbUIByValue();\n        this._slider._onValueChange(this);\n        this._cdr.detectChanges();\n      }\n    }\n    _getDefaultValue() {\n      return this.min;\n    }\n    _onBlur() {\n      this._setIsFocused(false);\n      this._onTouchedFn();\n    }\n    _onFocus() {\n      this._slider._setTransition(false);\n      this._slider._updateTrackUI(this);\n      this._setIsFocused(true);\n    }\n    _onChange() {\n      this.valueChange.emit(this.value);\n      // only used to handle the edge case where user\n      // mousedown on the slider then uses arrow keys.\n      if (this._isActive) {\n        this._updateThumbUIByValue({\n          withAnimation: true\n        });\n      }\n    }\n    _onInput() {\n      this._onChangeFn?.(this.value);\n      // handles arrowing and updating the value when\n      // a step is defined.\n      if (this._slider.step || !this._isActive) {\n        this._updateThumbUIByValue({\n          withAnimation: true\n        });\n      }\n      this._slider._onValueChange(this);\n    }\n    _onNgControlValueChange() {\n      // only used to handle when the value change\n      // originates outside of the slider.\n      if (!this._isActive || !this._isFocused) {\n        this._slider._onValueChange(this);\n        this._updateThumbUIByValue();\n      }\n      this._slider.disabled = this._formControl.disabled;\n    }\n    _onPointerDown(event) {\n      if (this.disabled || event.button !== 0) {\n        return;\n      }\n      // On IOS, dragging only works if the pointer down happens on the\n      // slider thumb and the slider does not receive focus from pointer events.\n      if (this._platform.IOS) {\n        const isCursorOnSliderThumb = this._slider._isCursorOnSliderThumb(event, this._slider._getThumb(this.thumbPosition)._hostElement.getBoundingClientRect());\n        this._isActive = isCursorOnSliderThumb;\n        this._updateWidthActive();\n        this._slider._updateDimensions();\n        return;\n      }\n      this._isActive = true;\n      this._setIsFocused(true);\n      this._updateWidthActive();\n      this._slider._updateDimensions();\n      // Does nothing if a step is defined because we\n      // want the value to snap to the values on input.\n      if (!this._slider.step) {\n        this._updateThumbUIByPointerEvent(event, {\n          withAnimation: true\n        });\n      }\n      if (!this.disabled) {\n        this._handleValueCorrection(event);\n        this.dragStart.emit({\n          source: this,\n          parent: this._slider,\n          value: this.value\n        });\n      }\n    }\n    /**\n     * Corrects the value of the slider on pointer up/down.\n     *\n     * Called on pointer down and up because the value is set based\n     * on the inactive width instead of the active width.\n     */\n    _handleValueCorrection(event) {\n      // Don't update the UI with the current value! The value on pointerdown\n      // and pointerup is calculated in the split second before the input(s)\n      // resize. See _updateWidthInactive() and _updateWidthActive() for more\n      // details.\n      this._skipUIUpdate = true;\n      // Note that this function gets triggered before the actual value of the\n      // slider is updated. This means if we were to set the value here, it\n      // would immediately be overwritten. Using setTimeout ensures the setting\n      // of the value happens after the value has been updated by the\n      // pointerdown event.\n      setTimeout(() => {\n        this._skipUIUpdate = false;\n        this._fixValue(event);\n      }, 0);\n    }\n    /** Corrects the value of the slider based on the pointer event's position. */\n    _fixValue(event) {\n      const xPos = event.clientX - this._slider._cachedLeft;\n      const width = this._slider._cachedWidth;\n      const step = this._slider.step === 0 ? 1 : this._slider.step;\n      const numSteps = Math.floor((this._slider.max - this._slider.min) / step);\n      const percentage = this._slider._isRtl ? 1 - xPos / width : xPos / width;\n      // To ensure the percentage is rounded to the necessary number of decimals.\n      const fixedPercentage = Math.round(percentage * numSteps) / numSteps;\n      const impreciseValue = fixedPercentage * (this._slider.max - this._slider.min) + this._slider.min;\n      const value = Math.round(impreciseValue / step) * step;\n      const prevValue = this.value;\n      if (value === prevValue) {\n        // Because we prevented UI updates, if it turns out that the race\n        // condition didn't happen and the value is already correct, we\n        // have to apply the ui updates now.\n        this._slider._onValueChange(this);\n        this._slider.step > 0 ? this._updateThumbUIByValue() : this._updateThumbUIByPointerEvent(event, {\n          withAnimation: this._slider._hasAnimation\n        });\n        return;\n      }\n      this.value = value;\n      this.valueChange.emit(this.value);\n      this._onChangeFn?.(this.value);\n      this._slider._onValueChange(this);\n      this._slider.step > 0 ? this._updateThumbUIByValue() : this._updateThumbUIByPointerEvent(event, {\n        withAnimation: this._slider._hasAnimation\n      });\n    }\n    _onPointerMove(event) {\n      // Again, does nothing if a step is defined because\n      // we want the value to snap to the values on input.\n      if (!this._slider.step && this._isActive) {\n        this._updateThumbUIByPointerEvent(event);\n      }\n    }\n    _onPointerUp() {\n      if (this._isActive) {\n        this._isActive = false;\n        if (this._platform.SAFARI) {\n          this._setIsFocused(false);\n        }\n        this.dragEnd.emit({\n          source: this,\n          parent: this._slider,\n          value: this.value\n        });\n        // This setTimeout is to prevent the pointerup from triggering a value\n        // change on the input based on the inactive width. It's not clear why\n        // but for some reason on IOS this race condition is even more common so\n        // the timeout needs to be increased.\n        setTimeout(() => this._updateWidthInactive(), this._platform.IOS ? 10 : 0);\n      }\n    }\n    _clamp(v) {\n      const min = this._tickMarkOffset;\n      const max = this._slider._cachedWidth - this._tickMarkOffset;\n      return Math.max(Math.min(v, max), min);\n    }\n    _calcTranslateXByValue() {\n      if (this._slider._isRtl) {\n        return (1 - this.percentage) * (this._slider._cachedWidth - this._tickMarkOffset * 2) + this._tickMarkOffset;\n      }\n      return this.percentage * (this._slider._cachedWidth - this._tickMarkOffset * 2) + this._tickMarkOffset;\n    }\n    _calcTranslateXByPointerEvent(event) {\n      return event.clientX - this._slider._cachedLeft;\n    }\n    /**\n     * Used to set the slider width to the correct\n     * dimensions while the user is dragging.\n     */\n    _updateWidthActive() {}\n    /**\n     * Sets the slider input to disproportionate dimensions to allow for touch\n     * events to be captured on touch devices.\n     */\n    _updateWidthInactive() {\n      this._hostElement.style.padding = `0 ${this._slider._inputPadding}px`;\n      this._hostElement.style.width = `calc(100% + ${this._slider._inputPadding - this._tickMarkOffset * 2}px)`;\n      this._hostElement.style.left = `-${this._slider._rippleRadius - this._tickMarkOffset}px`;\n    }\n    _updateThumbUIByValue(options) {\n      this.translateX = this._clamp(this._calcTranslateXByValue());\n      this._updateThumbUI(options);\n    }\n    _updateThumbUIByPointerEvent(event, options) {\n      this.translateX = this._clamp(this._calcTranslateXByPointerEvent(event));\n      this._updateThumbUI(options);\n    }\n    _updateThumbUI(options) {\n      this._slider._setTransition(!!options?.withAnimation);\n      this._slider._onTranslateXChange(this);\n    }\n    /**\n     * Sets the input's value.\n     * @param value The new value of the input\n     * @docs-private\n     */\n    writeValue(value) {\n      if (this._isControlInitialized || value !== null) {\n        this.value = value;\n      }\n    }\n    /**\n     * Registers a callback to be invoked when the input's value changes from user input.\n     * @param fn The callback to register\n     * @docs-private\n     */\n    registerOnChange(fn) {\n      this._onChangeFn = fn;\n      this._isControlInitialized = true;\n    }\n    /**\n     * Registers a callback to be invoked when the input is blurred by the user.\n     * @param fn The callback to register\n     * @docs-private\n     */\n    registerOnTouched(fn) {\n      this._onTouchedFn = fn;\n    }\n    /**\n     * Sets the disabled state of the slider.\n     * @param isDisabled The new disabled state\n     * @docs-private\n     */\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    focus() {\n      this._hostElement.focus();\n    }\n    blur() {\n      this._hostElement.blur();\n    }\n    static {\n      this.ɵfac = function MatSliderThumb_Factory(t) {\n        return new (t || MatSliderThumb)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_SLIDER));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatSliderThumb,\n        selectors: [[\"input\", \"matSliderThumb\", \"\"]],\n        hostAttrs: [\"type\", \"range\", 1, \"mdc-slider__input\"],\n        hostVars: 1,\n        hostBindings: function MatSliderThumb_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"change\", function MatSliderThumb_change_HostBindingHandler() {\n              return ctx._onChange();\n            })(\"input\", function MatSliderThumb_input_HostBindingHandler() {\n              return ctx._onInput();\n            })(\"blur\", function MatSliderThumb_blur_HostBindingHandler() {\n              return ctx._onBlur();\n            })(\"focus\", function MatSliderThumb_focus_HostBindingHandler() {\n              return ctx._onFocus();\n            });\n          }\n          if (rf & 2) {\n            i0.ɵɵattribute(\"aria-valuetext\", ctx._valuetext());\n          }\n        },\n        inputs: {\n          value: [2, \"value\", \"value\", numberAttribute]\n        },\n        outputs: {\n          valueChange: \"valueChange\",\n          dragStart: \"dragStart\",\n          dragEnd: \"dragEnd\"\n        },\n        exportAs: [\"matSliderThumb\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([MAT_SLIDER_THUMB_VALUE_ACCESSOR, {\n          provide: MAT_SLIDER_THUMB,\n          useExisting: MatSliderThumb\n        }]), i0.ɵɵInputTransformsFeature]\n      });\n    }\n  }\n  return MatSliderThumb;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatSliderRangeThumb = /*#__PURE__*/(() => {\n  class MatSliderRangeThumb extends MatSliderThumb {\n    /** @docs-private */\n    getSibling() {\n      if (!this._sibling) {\n        this._sibling = this._slider._getInput(this._isEndThumb ? _MatThumb.START : _MatThumb.END);\n      }\n      return this._sibling;\n    }\n    /**\n     * Returns the minimum translateX position allowed for this slider input's visual thumb.\n     * @docs-private\n     */\n    getMinPos() {\n      const sibling = this.getSibling();\n      if (!this._isLeftThumb && sibling) {\n        return sibling.translateX;\n      }\n      return this._tickMarkOffset;\n    }\n    /**\n     * Returns the maximum translateX position allowed for this slider input's visual thumb.\n     * @docs-private\n     */\n    getMaxPos() {\n      const sibling = this.getSibling();\n      if (this._isLeftThumb && sibling) {\n        return sibling.translateX;\n      }\n      return this._slider._cachedWidth - this._tickMarkOffset;\n    }\n    _setIsLeftThumb() {\n      this._isLeftThumb = this._isEndThumb && this._slider._isRtl || !this._isEndThumb && !this._slider._isRtl;\n    }\n    constructor(_ngZone, _slider, _elementRef, _cdr) {\n      super(_ngZone, _elementRef, _cdr, _slider);\n      this._cdr = _cdr;\n      this._isEndThumb = this._hostElement.hasAttribute('matSliderEndThumb');\n      this._setIsLeftThumb();\n      this.thumbPosition = this._isEndThumb ? _MatThumb.END : _MatThumb.START;\n    }\n    _getDefaultValue() {\n      return this._isEndThumb && this._slider._isRange ? this.max : this.min;\n    }\n    _onInput() {\n      super._onInput();\n      this._updateSibling();\n      if (!this._isActive) {\n        this._updateWidthInactive();\n      }\n    }\n    _onNgControlValueChange() {\n      super._onNgControlValueChange();\n      this.getSibling()?._updateMinMax();\n    }\n    _onPointerDown(event) {\n      if (this.disabled || event.button !== 0) {\n        return;\n      }\n      if (this._sibling) {\n        this._sibling._updateWidthActive();\n        this._sibling._hostElement.classList.add('mat-mdc-slider-input-no-pointer-events');\n      }\n      super._onPointerDown(event);\n    }\n    _onPointerUp() {\n      super._onPointerUp();\n      if (this._sibling) {\n        setTimeout(() => {\n          this._sibling._updateWidthInactive();\n          this._sibling._hostElement.classList.remove('mat-mdc-slider-input-no-pointer-events');\n        });\n      }\n    }\n    _onPointerMove(event) {\n      super._onPointerMove(event);\n      if (!this._slider.step && this._isActive) {\n        this._updateSibling();\n      }\n    }\n    _fixValue(event) {\n      super._fixValue(event);\n      this._sibling?._updateMinMax();\n    }\n    _clamp(v) {\n      return Math.max(Math.min(v, this.getMaxPos()), this.getMinPos());\n    }\n    _updateMinMax() {\n      const sibling = this.getSibling();\n      if (!sibling) {\n        return;\n      }\n      if (this._isEndThumb) {\n        this.min = Math.max(this._slider.min, sibling.value);\n        this.max = this._slider.max;\n      } else {\n        this.min = this._slider.min;\n        this.max = Math.min(this._slider.max, sibling.value);\n      }\n    }\n    _updateWidthActive() {\n      const minWidth = this._slider._rippleRadius * 2 - this._slider._inputPadding * 2;\n      const maxWidth = this._slider._cachedWidth + this._slider._inputPadding - minWidth - this._tickMarkOffset * 2;\n      const percentage = this._slider.min < this._slider.max ? (this.max - this.min) / (this._slider.max - this._slider.min) : 1;\n      const width = maxWidth * percentage + minWidth;\n      this._hostElement.style.width = `${width}px`;\n      this._hostElement.style.padding = `0 ${this._slider._inputPadding}px`;\n    }\n    _updateWidthInactive() {\n      const sibling = this.getSibling();\n      if (!sibling) {\n        return;\n      }\n      const maxWidth = this._slider._cachedWidth - this._tickMarkOffset * 2;\n      const midValue = this._isEndThumb ? this.value - (this.value - sibling.value) / 2 : this.value + (sibling.value - this.value) / 2;\n      const _percentage = this._isEndThumb ? (this.max - midValue) / (this._slider.max - this._slider.min) : (midValue - this.min) / (this._slider.max - this._slider.min);\n      const percentage = this._slider.min < this._slider.max ? _percentage : 1;\n      // Extend the native input width by the radius of the ripple\n      let ripplePadding = this._slider._rippleRadius;\n      // If one of the inputs is maximally sized (the value of both thumbs is\n      // equal to the min or max), make that input take up all of the width and\n      // make the other unselectable.\n      if (percentage === 1) {\n        ripplePadding = 48;\n      } else if (percentage === 0) {\n        ripplePadding = 0;\n      }\n      const width = maxWidth * percentage + ripplePadding;\n      this._hostElement.style.width = `${width}px`;\n      this._hostElement.style.padding = '0px';\n      if (this._isLeftThumb) {\n        this._hostElement.style.left = `-${this._slider._rippleRadius - this._tickMarkOffset}px`;\n        this._hostElement.style.right = 'auto';\n      } else {\n        this._hostElement.style.left = 'auto';\n        this._hostElement.style.right = `-${this._slider._rippleRadius - this._tickMarkOffset}px`;\n      }\n    }\n    _updateStaticStyles() {\n      this._hostElement.classList.toggle('mat-slider__right-input', !this._isLeftThumb);\n    }\n    _updateSibling() {\n      const sibling = this.getSibling();\n      if (!sibling) {\n        return;\n      }\n      sibling._updateMinMax();\n      if (this._isActive) {\n        sibling._updateWidthActive();\n      } else {\n        sibling._updateWidthInactive();\n      }\n    }\n    /**\n     * Sets the input's value.\n     * @param value The new value of the input\n     * @docs-private\n     */\n    writeValue(value) {\n      if (this._isControlInitialized || value !== null) {\n        this.value = value;\n        this._updateWidthInactive();\n        this._updateSibling();\n      }\n    }\n    _setValue(value) {\n      super._setValue(value);\n      this._updateWidthInactive();\n      this._updateSibling();\n    }\n    static {\n      this.ɵfac = function MatSliderRangeThumb_Factory(t) {\n        return new (t || MatSliderRangeThumb)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MAT_SLIDER), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatSliderRangeThumb,\n        selectors: [[\"input\", \"matSliderStartThumb\", \"\"], [\"input\", \"matSliderEndThumb\", \"\"]],\n        exportAs: [\"matSliderRangeThumb\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([MAT_SLIDER_RANGE_THUMB_VALUE_ACCESSOR, {\n          provide: MAT_SLIDER_RANGE_THUMB,\n          useExisting: MatSliderRangeThumb\n        }]), i0.ɵɵInheritDefinitionFeature]\n      });\n    }\n  }\n  return MatSliderRangeThumb;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatSliderModule = /*#__PURE__*/(() => {\n  class MatSliderModule {\n    static {\n      this.ɵfac = function MatSliderModule_Factory(t) {\n        return new (t || MatSliderModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatSliderModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [MatCommonModule, MatRippleModule]\n      });\n    }\n  }\n  return MatSliderModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatSlider, MatSliderChange, MatSliderModule, MatSliderRangeThumb, MatSliderThumb, MatSliderVisualThumb };\n","import { Directive, input } from '@angular/core';\n\n@Directive({ selector: 'ng-template[contextType]', standalone: true })\nexport class TemplateContextTypeDirective<T> {\n  contextType = input.required<T>();\n\n  public static ngTemplateContextGuard<T>(dir: TemplateContextTypeDirective<T>, ctx: unknown): ctx is T {\n    return true;\n  }\n}\n","import { DatePipe, JsonPipe, NgTemplateOutlet } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, computed, effect, inject, signal } from '@angular/core';\nimport { MatButton } from '@angular/material/button';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogConfig,\n  MatDialogContent,\n  MatDialogTitle,\n} from '@angular/material/dialog';\nimport { MatError, MatFormField, MatLabel } from '@angular/material/form-field';\nimport { MatInput } from '@angular/material/input';\nimport { MatSlider, MatSliderThumb } from '@angular/material/slider';\nimport { DatetimeLocalDirective } from '@app/directives/datetime-local.directive';\nimport { DurationComponent } from '@app/directives/duration.component';\nimport { TemplateContextTypeDirective } from '@app/directives/template-context-type.directive';\nimport { Milliseconds } from '@app/domain/date-time';\nimport { Session, sessionDuration } from '@app/domain/task';\nimport { MapPipe } from '@app/pipes/map.pipe';\nimport { AppStore } from '@app/providers/state';\n\nexport interface DialogSplitSessionData {\n  start: number;\n  end: number;\n}\n\n@Component({\n  selector: 'dialog-split-session',\n  templateUrl: './dialog-split-session.component.html',\n  styleUrls: ['./dialog-split-session.component.scss', '../screen-task/mat-table.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatDialogClose,\n    MatButton,\n    MatFormField,\n    MatError,\n    MatLabel,\n    MatInput,\n    DatetimeLocalDirective,\n    JsonPipe,\n    MatSlider,\n    MatSliderThumb,\n    DatePipe,\n    DurationComponent,\n    MapPipe,\n    TemplateContextTypeDirective,\n    NgTemplateOutlet,\n  ],\n})\nexport default class DialogSplitSessionComponent {\n  static dialogConfig: MatDialogConfig = {\n    autoFocus: false,\n  };\n\n  public readonly state = inject(AppStore);\n\n  public value = signal<null | Milliseconds>(null);\n\n  constructor() {\n    effect(\n      () => {\n        const session = this.state.dialogSession();\n        if (!session) return;\n        const middle = session.start + (session.end! - session.start) / 2;\n        this.value.set(middle);\n      },\n      {\n        allowSignalWrites: true,\n      },\n    );\n  }\n\n  public beforeSessions = computed(() => {\n    const session = this.state.dialogSession();\n    return session ? [session] : [];\n  });\n  public afterSessions = computed(() => {\n    const value = this.value();\n    const session = this.state.dialogSession();\n    if (!session || value === null) return [];\n    const before: Session = { ...session, end: value };\n    const after: Session = { ...session, start: value };\n    return [before, after];\n  });\n  public min = computed(() => {\n    const session = this.state.dialogSession();\n    return session?.start;\n  });\n  public max = computed(() => {\n    const session = this.state.dialogSession();\n    return session?.end;\n  });\n  public submitDisabled = computed(() => {\n    return this.value() === this.state.dialogSession()?.start || this.value() === this.state.dialogSession()?.end;\n  });\n  sessionDuration = sessionDuration;\n\n  sessionsContext!: {\n    sessions: Session[];\n  };\n\n  submit() {\n    const disabled = this.submitDisabled();\n    const result = this.afterSessions();\n    if (disabled || !result) return;\n    this.state.splitSession(result);\n  }\n}\n","<ng-template #sessionTable let-sessions=\"sessions\" [contextType]=\"sessionsContext\">\n  <table class=\"mat-mdc-table\">\n    <thead>\n      <tr class=\"mat-mdc-header-row mdc-data-table__header-row\">\n        <th class=\"header-start mat-mdc-header-cell mdc-data-table__header-cell\">Start</th>\n        <th class=\"header-end mat-mdc-header-cell mdc-data-table__header-cell\">End</th>\n        <th class=\"header-duration mat-mdc-header-cell mdc-data-table__header-cell\">Duration</th>\n      </tr>\n    </thead>\n    <tbody>\n      @for (session of sessions; track $index) {\n        <tr class=\"mat-mdc-row mdc-data-table__row\" data-e2e=\"dialog-split-session__session-row\">\n          <td class=\"mat-mdc-cell mdc-data-table__cell\" data-e2e=\"dialog-split-session__session-start\">\n            {{ session.start | date: 'yyyy-MM-dd H:mm' }}\n          </td>\n          <td class=\"mat-mdc-cell mdc-data-table__cell\" data-e2e=\"dialog-split-session__session-end\">\n            {{ session.end | date: 'yyyy-MM-dd H:mm' }}\n          </td>\n          <td class=\"mat-mdc-cell mdc-data-table__cell\" data-e2e=\"dialog-split-session__session-duration\">\n            <duration [value]=\"session | map: sessionDuration\"></duration>\n          </td>\n        </tr>\n      }\n    </tbody>\n  </table>\n</ng-template>\n\n<h1 mat-dialog-title>Split session</h1>\n<form mat-dialog-content>\n  <ng-container\n    *ngTemplateOutlet=\"sessionTable; context: { sessions: beforeSessions() } as sessionsContext\"\n  ></ng-container>\n\n  <mat-slider [min]=\"min()\" [max]=\"max()\">\n    <input\n      #thumb\n      matSliderThumb\n      [value]=\"value()\"\n      (input)=\"value.set(thumb.valueAsNumber)\"\n      data-e2e=\"dialog-split-session__slider-input\"\n    />\n  </mat-slider>\n\n  <ng-container\n    *ngTemplateOutlet=\"sessionTable; context: { sessions: afterSessions() } as sessionsContext\"\n  ></ng-container>\n</form>\n<div mat-dialog-actions align=\"end\">\n  <button type=\"button\" mat-button mat-dialog-close>Cancel</button>\n  <button\n    type=\"submit\"\n    form=\"promptForm\"\n    mat-button\n    data-e2e=\"dialog-split-session__button-submit\"\n    [disabled]=\"submitDisabled()\"\n    (click)=\"submit()\"\n  >\n    Split\n  </button>\n</div>\n"],"mappings":"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","names":["_c0","_c1","MatSliderVisualThumb_Conditional_0_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","_c2","_c3","MatSlider_Conditional_6_Conditional_2_For_1_Template","ɵɵelement","tickMark_r1","ɵ$index_14_r2","ctx_r2","ɵɵclassMap","ɵɵstyleProp","MatSlider_Conditional_6_Conditional_2_Template","ɵɵrepeaterCreate","ɵɵrepeaterTrackByIndex","ɵɵrepeater","MatSlider_Conditional_6_Template","ɵɵtemplate","ɵɵconditional","MatSlider_Conditional_7_Template","ɵɵproperty","_MatThumb","_MatTickMark","MAT_SLIDER","InjectionToken","MAT_SLIDER_THUMB","MAT_SLIDER_RANGE_THUMB","MAT_SLIDER_VISUAL_THUMB","MatSliderVisualThumb","_cdr","_ngZone","_elementRef","_slider","inject","Platform","event","rect","isHovered","input","rippleRef","RippleState","animation","ignoreGlobalRippleConfig","_MatThumb","sibling","t","ɵɵdirectiveInject","ChangeDetectorRef","NgZone","ElementRef","MAT_SLIDER","ɵɵdefineComponent","rf","ctx","ɵɵviewQuery","MatRipple","_c0","_c1","_t","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵProvidersFeature","MAT_SLIDER_VISUAL_THUMB","ɵɵStandaloneFeature","ɵɵtemplate","MatSliderVisualThumb_Conditional_0_Template","ɵɵelement","ɵɵconditional","ɵɵadvance","ɵɵproperty","MatSlider","v","endInput","startInput","min","prevMin","oldEndValue","oldStartValue","oldValue","max","prevMax","step","prevStartValue","_dir","_globalRippleOptions","animationMode","value","eInput","sInput","thumb","thumbPosition","styles","trackStyle","index","source","input1","input2","sourceThumb","valuetext","visualThumb","percentage","activePercentage","numActive","numInactive","_MatTickMark","endValue","startValue","numInactiveBeforeStartThumb","numInactiveAfterEndThumb","withAnimation","radius","centerX","centerY","dx","dy","Directionality","MAT_RIPPLE_GLOBAL_OPTIONS","ANIMATION_MODULE_TYPE","dirIndex","ɵɵcontentQuery","MAT_SLIDER_THUMB","MAT_SLIDER_RANGE_THUMB","_c2","ɵɵclassMap","ɵɵclassProp","booleanAttribute","numberAttribute","ɵɵInputTransformsFeature","_c3","ɵɵprojectionDef","ɵɵprojection","ɵɵelementStart","ɵɵelementEnd","MatSlider_Conditional_6_Template","MatSlider_Conditional_7_Template","MAT_SLIDER_THUMB_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatSliderThumb","MatSliderThumb","numberAttribute","value","stringValue","v","booleanAttribute","_ngZone","_elementRef","_cdr","_slider","EventEmitter","_MatThumb","signal","Subject","inject","Platform","event","isCursorOnSliderThumb","xPos","width","step","numSteps","percentage","impreciseValue","prevValue","min","max","options","fn","isDisabled","t","ɵɵdirectiveInject","NgZone","ElementRef","ChangeDetectorRef","MAT_SLIDER","ɵɵdefineDirective","rf","ctx","ɵɵlistener","ɵɵattribute","ɵɵProvidersFeature","MAT_SLIDER_THUMB_VALUE_ACCESSOR","MAT_SLIDER_THUMB","ɵɵInputTransformsFeature","TemplateContextTypeDirective","contextType","input","required","ngTemplateContextGuard","dir","ctx","selectors","inputs","standalone","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate1","ɵɵpipeBind2","session_r2","start","end","ɵɵproperty","ctx_r2","sessionDuration","ɵɵrepeaterCreate","DialogSplitSessionComponent_ng_template_0_For_11_Template","ɵɵrepeaterTrackByIndex","ɵɵrepeater","sessions_r4","ɵɵelementContainer","DialogSplitSessionComponent","dialogConfig","autoFocus","state","inject","AppStore","value","signal","constructor","effect","session","dialogSession","middle","set","allowSignalWrites","beforeSessions","computed","afterSessions","before","__spreadProps","__spreadValues","after","min","max","submitDisabled","sessionsContext","submit","disabled","result","splitSession","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","rf","ctx","ɵɵtemplate","DialogSplitSessionComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","DialogSplitSessionComponent_ng_container_5_Template","ɵɵlistener","ɵɵrestoreView","_r1","thumb_r5","ɵɵreference","ɵɵresetView","valueAsNumber","DialogSplitSessionComponent_ng_container_9_Template","i0","sessionTable_r6","ɵɵpureFunction1","_c0","MatDialogTitle","MatDialogContent","MatDialogActions","MatDialogClose","MatButton","MatSlider","MatSliderThumb","DatePipe","DurationComponent","MapPipe","TemplateContextTypeDirective","NgTemplateOutlet","styles","changeDetection"],"x_google_ignoreList":[0]}