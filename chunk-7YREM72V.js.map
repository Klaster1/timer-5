{
  "version": 3,
  "sources": ["src/app/directives/datetime-local.directive.ts"],
  "sourcesContent": ["import { Directive, ElementRef, forwardRef, inject } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst utcDateToLocalDate = (date: Date): Date => {\n  const utcDate = new Date(date);\n  return new Date(utcDate.getTime() - utcDate.getTimezoneOffset() * 60000);\n};\n\nconst toDateTimeLocalValue = (date: Date): string => {\n  return date.toISOString().replace('Z', '');\n};\n\n@Directive({\n  selector: 'input[type=\"datetime-local\"]',\n  host: {\n    '(input)': 'this._handleInput($event.target.value)',\n    '(blur)': 'onTouched()',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DatetimeLocalDirective),\n      multi: true,\n    },\n  ],\n  standalone: true,\n})\nexport class DatetimeLocalDirective implements ControlValueAccessor {\n  private _elementRef = inject<ElementRef<HTMLInputElement>>(ElementRef);\n\n  writeValue(value: unknown): void {\n    const normalizedValue = value instanceof Date ? toDateTimeLocalValue(utcDateToLocalDate(value)) : null;\n    this._elementRef.nativeElement.value = normalizedValue ?? '';\n  }\n\n  _handleInput(value: string | undefined): void {\n    this.onChange(value?.length ? new Date(value) : value);\n  }\n\n  onChange = (_: any) => {};\n\n  onTouched = () => {};\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  registerOnChange(fn: (_: any) => {}): void {\n    this.onChange = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._elementRef.nativeElement.disabled = isDisabled;\n  }\n}\n"],
  "mappings": "yHAGA,IAAMA,EAAsBC,GAAoB,CAC9C,IAAMC,EAAU,IAAIC,KAAKF,CAAI,EAC7B,OAAO,IAAIE,KAAKD,EAAQE,QAAO,EAAKF,EAAQG,kBAAiB,EAAK,GAAK,CACzE,EAEMC,EAAwBL,GACrBA,EAAKM,YAAW,EAAGC,QAAQ,IAAK,EAAE,EAkB9BC,GAAsB,IAAA,CAA7B,MAAOA,CAAsB,CAfnCC,aAAA,CAgBU,KAAAC,YAAcC,EAAqCC,CAAU,EAWrE,KAAAC,SAAYC,GAAU,CAAE,EAExB,KAAAC,UAAY,IAAK,CAAE,EAXnBC,WAAWC,EAAc,CACvB,IAAMC,EAAkBD,aAAiBf,KAAOG,EAAqBN,EAAmBkB,CAAK,CAAC,EAAI,KAClG,KAAKP,YAAYS,cAAcF,MAAQC,GAAmB,EAC5D,CAEAE,aAAaH,EAAyB,CACpC,KAAKJ,SAASI,GAAOI,OAAS,IAAInB,KAAKe,CAAK,EAAIA,CAAK,CACvD,CAMAK,kBAAkBC,EAAc,CAC9B,KAAKR,UAAYQ,CACnB,CAEAC,iBAAiBD,EAAkB,CACjC,KAAKV,SAAWU,CAClB,CAEAE,iBAAiBC,EAAmB,CAClC,KAAKhB,YAAYS,cAAcQ,SAAWD,CAC5C,iDA1BWlB,EAAsB,CAAA,+BAAtBA,EAAsBoB,UAAA,CAAA,CAAA,QAAA,OAAA,gBAAA,CAAA,EAAAC,aAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,GAAtBE,EAAA,QAAA,SAAAC,EAAA,CAAA,OAAAF,EAAAX,aAAAa,EAAAC,OAAAjB,KAAA,CAAsC,CAAA,EAAhB,OAAA,UAAA,CAAA,OAAtBc,EAAAhB,UAAA,CAAW,CAAA,6BATX,CACT,CACEoB,QAASC,EACTC,YAAaC,EAAW,IAAM9B,CAAsB,EACpD+B,MAAO,GACR,CACF,CAAA,CAAA,CAAA,CAAA,SAGU/B,CAAsB,GAAA",
  "names": ["utcDateToLocalDate", "date", "utcDate", "Date", "getTime", "getTimezoneOffset", "toDateTimeLocalValue", "toISOString", "replace", "DatetimeLocalDirective", "constructor", "_elementRef", "inject", "ElementRef", "onChange", "_", "onTouched", "writeValue", "value", "normalizedValue", "nativeElement", "_handleInput", "length", "registerOnTouched", "fn", "registerOnChange", "setDisabledState", "isDisabled", "disabled", "selectors", "hostBindings", "rf", "ctx", "\u0275\u0275listener", "$event", "target", "provide", "NG_VALUE_ACCESSOR", "useExisting", "forwardRef", "multi"]
}
