{
  "version": 3,
  "sources": ["src/app/directives/duration.component.ts"],
  "sourcesContent": ["import { AsyncPipe, NgClass } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { takeUntilDestroyed, toObservable } from '@angular/core/rxjs-interop';\nimport { DurationFn } from '@app/domain/date-time';\nimport { pad2 } from '@app/utils/number';\nimport { secondsToMilliseconds } from 'date-fns';\nimport { combineLatest, interval, map, shareReplay, startWith } from 'rxjs';\n\nenum DimMode {\n  All,\n  First,\n  None,\n}\n\ntype Fragment = {\n  value: string;\n  unit: Unit;\n  dimmed: DimMode;\n};\n\nenum Unit {\n  Hours = 'h',\n  Minutes = 'm',\n  Seconds = 's',\n}\n\nconst EVERY_SECOND_INTERVAL = interval(secondsToMilliseconds(1)).pipe(\n  startWith(0),\n  map(() => Date.now()),\n  shareReplay({ refCount: true, bufferSize: 1 }),\n);\n\n@Component({\n  selector: 'duration',\n  // prettier-ignore\n  template: `@for(fragment of durationFragments | async; track fragment.unit){<span class=\"fragment\" [ngClass]=\"{ dimmed: fragment.dimmed === DimMode.All }\"><span class=\"value\">@if(fragment.dimmed === DimMode.First){<span class=\"dimmed\">{{ fragment.value.at(0) }}</span><span>{{ fragment.value.slice(1) }}</span>}@else{{{ fragment.value }}}</span><span class=\"unit\">{{ fragment.unit }}</span></span>}`,\n  styles: [\n    `\n      :host {\n        display: inline-flex;\n        gap: 0.35em;\n        --unit-font-size: 0.6em;\n      }\n      .unit {\n        font-size: var(--unit-font-size);\n      }\n      .value {\n        display: inline-flex;\n        align-items: baseline;\n      }\n      .dimmed {\n        opacity: 0.35;\n      }\n    `,\n  ],\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgClass, AsyncPipe],\n})\nexport class DurationComponent {\n  public readonly value = input.required<DurationFn>();\n  public readonly DimMode = DimMode;\n  public readonly durationFragments = combineLatest([toObservable(this.value), EVERY_SECOND_INTERVAL]).pipe(\n    map(([value, now]): Fragment[] => {\n      const hours = ~~(value(now) / 3600000);\n      const minutes = ~~((value(now) % 3600000) / 60000);\n      const seconds = ~~((value(now) % 60000) / 1000);\n      if (hours === 0 && minutes === 0) {\n        return [{ value: seconds.toString(), unit: Unit.Seconds, dimmed: DimMode.None }];\n      }\n      return [\n        { value: hours.toString(), unit: Unit.Hours, dimmed: hours === 0 ? DimMode.All : DimMode.None },\n        {\n          value: pad2(minutes),\n          unit: Unit.Minutes,\n          dimmed:\n            hours === 0 && minutes === 0 ? DimMode.All : minutes < 10 && hours === 0 ? DimMode.First : DimMode.None,\n        },\n      ];\n    }),\n    takeUntilDestroyed(),\n  );\n}\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "fragment_r1", "value", "at", "slice", "\u0275\u0275template", "DurationComponent_For_1_Conditional_2_Template", "DurationComponent_For_1_Conditional_3_Template", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "dimmed", "ctx_r1", "DimMode", "All", "\u0275\u0275conditional", "First", "unit", "Unit", "EVERY_SECOND_INTERVAL", "interval", "secondsToMilliseconds", "pipe", "startWith", "map", "Date", "now", "shareReplay", "refCount", "bufferSize", "DurationComponent", "input", "required", "durationFragments", "combineLatest", "toObservable", "hours", "minutes", "seconds", "toString", "Seconds", "None", "Hours", "pad2", "Minutes", "takeUntilDestroyed", "selectors", "inputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275repeaterCreate", "DurationComponent_For_1_Template", "_forTrack0", "\u0275\u0275repeater", "\u0275\u0275pipeBind1", "NgClass", "AsyncPipe", "styles", "changeDetection"]
}
