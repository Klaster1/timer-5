{
  "version": 3,
  "sources": ["src/app/pipes/tasks-duration.pipe.ts", "src/app/screen-tasks/checkViewportSizeWhenValueChanges.directive.ts", "src/app/screen-tasks/scrollToIndex.directive.ts", "src/app/screen-tasks/screen-tasks.component.ts", "src/app/screen-tasks/screen-tasks.component.html"],
  "sourcesContent": ["import { Pipe, PipeTransform } from '@angular/core';\r\nimport { tasksDuration } from '@app/domain/task';\r\n\r\n@Pipe({ name: 'tasksDuration', standalone: true })\r\nexport class TasksDurationPipe implements PipeTransform {\r\n  transform = tasksDuration;\r\n}\r\n", "import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\r\nimport { Directive, effect, inject, input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[checkViewportSizeWhenValueChanges]',\r\n  standalone: true,\r\n})\r\nexport class CheckViewportSizeWhenValueChangesDirective {\r\n  private viewport = inject(CdkVirtualScrollViewport);\r\n  public checkViewportSizeWhenValueChanges = input<any>();\r\n  constructor() {\r\n    effect(() => {\r\n      this.checkViewportSizeWhenValueChanges();\r\n      this.viewport.checkViewportSize();\r\n    });\r\n  }\r\n}\r\n", "import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\r\nimport { Directive, effect, inject, input } from '@angular/core';\r\nimport { isNumber } from '@app/utils/assert';\r\n\r\n@Directive({\r\n  selector: '[scrollToIndex]',\r\n  standalone: true,\r\n})\r\nexport class ScrollToIndexDirective {\r\n  private viewport = inject(CdkVirtualScrollViewport);\r\n\r\n  public itemSize = input<number>();\r\n  public scrollToIndex = input<number | undefined>();\r\n\r\n  private previousIndex?: number;\r\n  constructor() {\r\n    effect(() => {\r\n      const index = this.scrollToIndex();\r\n      const itemSize = this.itemSize();\r\n      if (!isNumber(index) || index === -1 || !itemSize) {\r\n        this.previousIndex = index;\r\n        return;\r\n      }\r\n      const offsetTop = index * itemSize;\r\n      const behavior: ScrollBehavior | undefined = !isNumber(this.previousIndex) ? 'smooth' : undefined;\r\n      setTimeout(() => {\r\n        this.viewport.scrollToOffset(offsetTop - this.viewport.getViewportSize() / 2, behavior);\r\n        this.previousIndex = index;\r\n      });\r\n    });\r\n  }\r\n}\r\n", "import { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { AsyncPipe, NgClass } from '@angular/common';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  DestroyRef,\r\n  TrackByFunction,\r\n  afterNextRender,\r\n  computed,\r\n  inject,\r\n  signal,\r\n} from '@angular/core';\r\nimport { MatButton, MatFabButton, MatIconButton } from '@angular/material/button';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatListItem, MatNavList } from '@angular/material/list';\r\nimport { MatToolbar } from '@angular/material/toolbar';\r\nimport { MatTooltip } from '@angular/material/tooltip';\r\nimport { Router, RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\nimport { ButtonTaskActionsComponent } from '@app/button-task-actions/button-task-actions.component';\r\nimport { KEYS_ADD, KEYS_NEXT, KEYS_PREV, KEYS_SEARCH, hotkey } from '@app/domain/hotkeys';\r\nimport { SessionDragEvent, Task, TaskState, isTaskRunning } from '@app/domain/task';\r\nimport { FormatDurationPipe } from '@app/pipes/format-duration.pipe';\r\nimport { MapPipe } from '@app/pipes/map.pipe';\r\nimport { TaskDurationPipe } from '@app/pipes/task-duration.pipe';\r\nimport { TaskStateIconPipe } from '@app/pipes/task-state-icon.pipe';\r\nimport { TaskStatePipe } from '@app/pipes/task-state.pipe';\r\nimport { TasksDurationPipe } from '@app/pipes/tasks-duration.pipe';\r\nimport { AppStore } from '@app/services/state';\r\nimport { Hotkey, HotkeysService } from 'angular2-hotkeys';\r\nimport { CheckViewportSizeWhenValueChangesDirective } from './checkViewportSizeWhenValueChanges.directive';\r\nimport { EmptyStateComponent } from './empty-state/empty-state.component';\r\nimport { ScrollToIndexDirective } from './scrollToIndex.directive';\r\nimport { TasksFilterComponent } from './tasks-filter/tasks-filter.component';\r\n\r\n@Component({\r\n  selector: 'screen-tasks',\r\n  templateUrl: './screen-tasks.component.html',\r\n  styleUrls: ['./screen-tasks.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  standalone: true,\r\n  imports: [\r\n    EmptyStateComponent,\r\n    TasksFilterComponent,\r\n    TaskStatePipe,\r\n    FormatDurationPipe,\r\n    TaskDurationPipe,\r\n    TasksDurationPipe,\r\n    TaskStateIconPipe,\r\n    RouterLink,\r\n    RouterOutlet,\r\n    RouterLinkActive,\r\n    ScrollingModule,\r\n    MatToolbar,\r\n    MatIcon,\r\n    MatButton,\r\n    MatIconButton,\r\n    MatFabButton,\r\n    MatNavList,\r\n    MatListItem,\r\n    MatTooltip,\r\n    ButtonTaskActionsComponent,\r\n    MapPipe,\r\n    DragDropModule,\r\n    CheckViewportSizeWhenValueChangesDirective,\r\n    ScrollToIndexDirective,\r\n    AsyncPipe,\r\n    NgClass,\r\n  ],\r\n})\r\nexport default class ScreenTasksComponent {\r\n  public store = inject(AppStore);\r\n  private keys = inject(HotkeysService);\r\n  private router = inject(Router);\r\n  private destroyRef = inject(DestroyRef);\r\n\r\n  private filterPresent = computed(() => !!Object.keys(this.store.decodedFilterParams()).length);\r\n  private filterToggles = signal<boolean | undefined>(undefined);\r\n  public searchOpened = computed(() => {\r\n    const filterPresent = this.filterPresent();\r\n    const filterToggles = this.filterToggles();\r\n    return filterToggles !== undefined ? filterToggles : filterPresent;\r\n  });\r\n\r\n  constructor() {\r\n    afterNextRender(() => {\r\n      this.keys.add(this.hotkeys);\r\n    });\r\n    this.destroyRef.onDestroy(() => {\r\n      this.keys.remove(this.hotkeys);\r\n    });\r\n  }\r\n\r\n  taskState = TaskState;\r\n  isTaskRunning = isTaskRunning;\r\n  taskId: TrackByFunction<Task> = (_, task) => task.id;\r\n\r\n  hotkeys = [\r\n    hotkey(KEYS_ADD, 'Add task', () => this.store.createTask()),\r\n    hotkey([...KEYS_NEXT, ...KEYS_PREV], 'Next/prev task', (e) => {\r\n      const state = this.store.currentTaskState();\r\n      const taskId = KEYS_NEXT.includes(e.key)\r\n        ? this.store.nextTaskId()\r\n        : KEYS_PREV.includes(e.key)\r\n          ? this.store.prevTaskId()\r\n          : null;\r\n      if (state && taskId) this.router.navigate([state, taskId], { queryParamsHandling: 'merge' });\r\n    }),\r\n    new Hotkey(\r\n      KEYS_SEARCH,\r\n      (e) => {\r\n        e.preventDefault();\r\n        this.toggleFilter();\r\n        return true;\r\n      },\r\n      ['INPUT'],\r\n      'Toggle search',\r\n    ),\r\n  ];\r\n\r\n  toggleFilter(opened?: boolean) {\r\n    this.filterToggles.update(() => opened ?? !this.searchOpened());\r\n  }\r\n  onDrop(\r\n    {\r\n      item: {\r\n        data: [session, fromTaskid],\r\n      },\r\n    }: SessionDragEvent,\r\n    item: Task,\r\n  ) {\r\n    if (session && fromTaskid) this.store.moveSessionToTask(fromTaskid, item.id, session);\r\n  }\r\n}\r\n", "<div class=\"container\" [ngClass]=\"{ 'task-opened': store.isCurrentTaskOpened() }\">\r\n  @if (store.currentTasks(); as tasks) {\r\n    <section class=\"tasks\">\r\n      <mat-toolbar>\r\n        <h1>\r\n          <ng-container> {{ store.currentTaskState() | taskState }} </ng-container>\r\n          @if (tasks | tasksDuration: 20000 | formatDuration | async; as duration) {\r\n            <span class=\"state-duration\" data-e2e=\"screen-tasks__total\"> ({{ duration }}) </span>\r\n          }\r\n        </h1>\r\n        <button mat-icon-button (click)=\"toggleFilter()\" matTooltip=\"Toggle filter panel\" #toggle>\r\n          <mat-icon svgIcon=\"filter_list\"></mat-icon>\r\n        </button>\r\n      </mat-toolbar>\r\n      @defer (on hover(toggle); on interaction(toggle); when searchOpened()) {\r\n        @if (searchOpened()) {\r\n          <tasks-filter (keyup.esc)=\"toggleFilter(false)\"></tasks-filter>\r\n        }\r\n      }\r\n      @if (tasks.length) {\r\n        <button\r\n          (click)=\"store.createTask()\"\r\n          mat-fab\r\n          color=\"accent\"\r\n          data-e2e=\"button-add-task\"\r\n          matTooltip=\"Create a task\"\r\n        >\r\n          <mat-icon svgIcon=\"add\"></mat-icon>\r\n        </button>\r\n        <cdk-virtual-scroll-viewport\r\n          #scroll\r\n          [itemSize]=\"48\"\r\n          [scrollToIndex]=\"store.currentTaskIndex()\"\r\n          [checkViewportSizeWhenValueChanges]=\"tasks\"\r\n        >\r\n          <mat-nav-list>\r\n            <mat-list-item\r\n              *cdkVirtualFor=\"let task of tasks; trackBy: taskId\"\r\n              cdkDropList\r\n              (cdkDropListDropped)=\"onDrop($event, task)\"\r\n              data-e2e=\"screen-tasks__task-item\"\r\n              [activated]=\"rla.isActive\"\r\n            >\r\n              <div class=\"item-content\">\r\n                <a\r\n                  matLine\r\n                  [routerLink]=\"[task.id]\"\r\n                  queryParamsHandling=\"merge\"\r\n                  fixRouterLinkActive\r\n                  routerLinkActive\r\n                  class=\"task-link\"\r\n                  #rla=\"routerLinkActive\"\r\n                >\r\n                  <mat-icon\r\n                    [svgIcon]=\"task | taskStateIcon\"\r\n                    [ngClass]=\"{ running: task | map: isTaskRunning }\"\r\n                    data-e2e=\"screen-tasks__task-state-icon\"\r\n                  ></mat-icon>\r\n                  <span class=\"name\" data-e2e=\"screen-tasks__task-name\">{{ task.name }}</span>\r\n                  <span class=\"duration\" data-e2e=\"screen-tasks__task-duration\">{{\r\n                    task | taskDuration: 5000 | formatDuration | async\r\n                  }}</span>\r\n                </a>\r\n                <button-task-actions [task]=\"task\"></button-task-actions>\r\n              </div>\r\n            </mat-list-item>\r\n          </mat-nav-list>\r\n        </cdk-virtual-scroll-viewport>\r\n      } @else {\r\n        @defer {\r\n          @if (searchOpened() === false) {\r\n            <empty-state>\r\n              <img src=\"assets/favicon.svg\" alt=\"Timer\" illustration />\r\n              <span title>No tasks</span>\r\n              <span subtitle>\r\n                @switch (store.currentTaskState()) {\r\n                  @case ('all') {\r\n                    Create a task and it will show up here\r\n                  }\r\n                  @case (taskState.active) {\r\n                    Create a task and it will show up here\r\n                  }\r\n                  @case (taskState.finished) {\r\n                    You didn't finish any tasks yet\r\n                  }\r\n                  @case (taskState.dropped) {\r\n                    You didn't abandon any tasks yet\r\n                  }\r\n                }\r\n              </span>\r\n              <button\r\n                color=\"primary\"\r\n                mat-raised-button\r\n                (click)=\"store.createTask()\"\r\n                type=\"button\"\r\n                routerLink=\"/tasks/active\"\r\n                data-e2e=\"screen-tasks__button-add-task-empty-state\"\r\n              >\r\n                Create a task\r\n              </button>\r\n            </empty-state>\r\n          } @else {\r\n            <empty-state>\r\n              <mat-icon color=\"accent\" illustration svgIcon=\"search\"></mat-icon>\r\n              <span title>Nothing found</span>\r\n              <span subtitle>Could not find tasks matching the criteria</span>\r\n              <button mat-raised-button (click)=\"toggleFilter(false)\" type=\"button\">Reset filter</button>\r\n            </empty-state>\r\n          }\r\n        }\r\n      }\r\n    </section>\r\n  }\r\n\r\n  @if (store.isCurrentTaskOpened()) {\r\n    <section class=\"task mat-app-background\">\r\n      <router-outlet></router-outlet>\r\n    </section>\r\n  }\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["TasksDurationPipe", "constructor", "transform", "tasksDuration", "pure", "standalone", "CheckViewportSizeWhenValueChangesDirective", "constructor", "viewport", "inject", "CdkVirtualScrollViewport", "checkViewportSizeWhenValueChanges", "input", "effect", "checkViewportSize", "selectors", "inputs", "standalone", "ScrollToIndexDirective", "constructor", "viewport", "inject", "CdkVirtualScrollViewport", "itemSize", "input", "scrollToIndex", "effect", "index", "isNumber", "previousIndex", "offsetTop", "behavior", "undefined", "setTimeout", "scrollToOffset", "getViewportSize", "selectors", "inputs", "standalone", "RouterLink", "MatIcon", "MatButton", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "ctx", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleFilter", "\u0275\u0275template", "ScreenTasksComponent_Conditional_1_Defer_13_Conditional_0_Template", "\u0275\u0275conditional", "searchOpened", "$event", "task_r6", "_r5", "$implicit", "onDrop", "\u0275\u0275element", "\u0275\u0275property", "rla_r7", "isActive", "\u0275\u0275pureFunction1", "_c1", "id", "\u0275\u0275pipeBind1", "_c2", "\u0275\u0275pipeBind2", "isTaskRunning", "\u0275\u0275textInterpolate", "name", "_r4", "store", "createTask", "ScreenTasksComponent_Conditional_1_Conditional_16_mat_list_item_5_Template", "currentTaskIndex", "tasks_r8", "taskId", "ScreenTasksComponent_Conditional_1_Conditional_17_Defer_0_Conditional_0_Case_5_Template", "ScreenTasksComponent_Conditional_1_Conditional_17_Defer_0_Conditional_0_Case_6_Template", "ScreenTasksComponent_Conditional_1_Conditional_17_Defer_0_Conditional_0_Case_7_Template", "ScreenTasksComponent_Conditional_1_Conditional_17_Defer_0_Conditional_0_Case_8_Template", "_r9", "tmp_6_0", "currentTaskState", "taskState", "active", "finished", "dropped", "_r10", "ScreenTasksComponent_Conditional_1_Conditional_17_Defer_0_Conditional_0_Template", "ScreenTasksComponent_Conditional_1_Conditional_17_Defer_0_Conditional_1_Template", "ScreenTasksComponent_Conditional_1_Conditional_17_Defer_0_Template", "\u0275\u0275defer", "ScreenTasksComponent_Conditional_1_Conditional_17_Defer_1_DepsFn", "\u0275\u0275elementContainerStart", "ScreenTasksComponent_Conditional_1_Conditional_6_Template", "_r1", "ScreenTasksComponent_Conditional_1_Defer_13_Template", "ScreenTasksComponent_Conditional_1_Defer_14_DepsFn", "\u0275\u0275deferOnHover", "\u0275\u0275deferOnInteraction", "ScreenTasksComponent_Conditional_1_Conditional_16_Template", "ScreenTasksComponent_Conditional_1_Conditional_17_Template", "tmp_4_0", "\u0275\u0275deferWhen", "length", "ScreenTasksComponent", "constructor", "inject", "AppStore", "keys", "HotkeysService", "router", "Router", "destroyRef", "DestroyRef", "filterPresent", "computed", "Object", "decodedFilterParams", "filterToggles", "signal", "undefined", "TaskState", "_", "task", "hotkeys", "hotkey", "KEYS_ADD", "KEYS_NEXT", "KEYS_PREV", "e", "state", "includes", "key", "nextTaskId", "prevTaskId", "navigate", "queryParamsHandling", "Hotkey", "KEYS_SEARCH", "preventDefault", "afterNextRender", "add", "onDestroy", "remove", "opened", "update", "item", "data", "session", "fromTaskid", "moveSessionToTask", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ScreenTasksComponent_Conditional_1_Template", "ScreenTasksComponent_Conditional_2_Template", "_c0", "isCurrentTaskOpened", "tmp_1_0", "currentTasks", "TaskStatePipe", "FormatDurationPipe", "TaskDurationPipe", "TasksDurationPipe", "TaskStateIconPipe", "RouterOutlet", "RouterLinkActive", "ScrollingModule", "CdkFixedSizeVirtualScroll", "CdkVirtualForOf", "CdkVirtualScrollViewport", "MatToolbar", "MatIconButton", "MatFabButton", "MatNavList", "MatListItem", "MatTooltip", "ButtonTaskActionsComponent", "MapPipe", "DragDropModule", "CdkDropList", "CheckViewportSizeWhenValueChangesDirective", "ScrollToIndexDirective", "AsyncPipe", "NgClass", "styles", "changeDetection"]
}
