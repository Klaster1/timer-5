{
  "version": 3,
  "sources": ["src/app/utils/string.ts", "src/app/dialog-hotkeys-cheatsheet/dialog-hotkeys-cheatsheet.component.ts", "src/app/dialog-hotkeys-cheatsheet/dialog-hotkeys-cheatsheet.component.html"],
  "sourcesContent": ["export const hasCyrillics = (value: string): boolean => !!value.match(/[а-я]/);\r\n", "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\r\nimport { MatButton } from '@angular/material/button';\r\nimport { MatDialogActions, MatDialogClose, MatDialogContent, MatDialogTitle } from '@angular/material/dialog';\r\nimport { MapPipe } from '@app/pipes/map.pipe';\r\nimport { hasCyrillics } from '@app/utils/string';\r\nimport { HotkeysService } from 'angular2-hotkeys';\r\n\r\ntype DisplayFragment = { type: 'key'; value: string } | { type: 'combo' } | { type: 'chord' } | { type: 'separator' };\r\n\r\n@Component({\r\n  selector: 'dialog-hotkeys-cheatsheet',\r\n  templateUrl: './dialog-hotkeys-cheatsheet.component.html',\r\n  styleUrls: ['./dialog-hotkeys-cheatsheet.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  standalone: true,\r\n  imports: [MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogClose, MatButton, MapPipe],\r\n})\r\nexport default class DialogHotkeysCheatsheetComponent {\r\n  private hotkeysService = inject(HotkeysService);\r\n  keys = this.hotkeysService.hotkeys.filter((key) => key.description);\r\n  withoutCyrillics = (values: string[]): string[] => [...values].filter((value) => !hasCyrillics(value));\r\n  split = (value: string[]): DisplayFragment[] =>\r\n    value.flatMap((value, index, all) => {\r\n      const withSeparator = (fragments: DisplayFragment[]): DisplayFragment[] => {\r\n        return index < all.length - 1 ? [...fragments, { type: 'separator' }] : fragments;\r\n      };\r\n      if (value.includes('+')) {\r\n        return withSeparator(\r\n          value\r\n            .split('+')\r\n            .filter((value) => value !== ' ')\r\n            .flatMap((value, index, all): DisplayFragment[] => {\r\n              return index < all.length - 1 ? [{ type: 'key', value }, { type: 'combo' }] : [{ type: 'key', value }];\r\n            }),\r\n        );\r\n      } else if (value.includes(' ')) {\r\n        return withSeparator(\r\n          [...value].map((value): DisplayFragment => {\r\n            if (value === ' ') return { type: 'chord' };\r\n            return { type: 'key', value };\r\n          }),\r\n        );\r\n      } else {\r\n        return withSeparator([{ type: 'key', value }]);\r\n      }\r\n    });\r\n}\r\n", "<h1 mat-dialog-title>Keyboard shortcuts</h1>\r\n<div mat-dialog-content>\r\n  <dl>\r\n    @for (key of keys; track key.action) {\r\n      <dt>\r\n        @for (fragment of key.formatted | map: withoutCyrillics | map: split; track $index) {\r\n          @switch (fragment.type) {\r\n            @case ('key') {\r\n              <kbd>{{ fragment.value }}</kbd>\r\n            }\r\n            @case ('combo') {\r\n              <span class=\"combo\">+</span>\r\n            }\r\n            @case ('chord') {}\r\n            @case ('separator') {\r\n              <span class=\"separator\">,</span>\r\n            }\r\n          }\r\n        }\r\n      </dt>\r\n      <dd>{{ key.description }}</dd>\r\n    }\r\n  </dl>\r\n</div>\r\n<div mat-dialog-actions align=\"end\">\r\n  <button mat-button mat-dialog-close>Close</button>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["hasCyrillics", "value", "match", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "fragment_r1", "value", "\u0275\u0275template", "DialogHotkeysCheatsheetComponent_For_5_For_2_Case_0_Template", "DialogHotkeysCheatsheetComponent_For_5_For_2_Case_1_Template", "DialogHotkeysCheatsheetComponent_For_5_For_2_Case_2_Template", "DialogHotkeysCheatsheetComponent_For_5_For_2_Case_3_Template", "\u0275\u0275conditional", "tmp_20_0", "type", "\u0275\u0275repeaterCreate", "DialogHotkeysCheatsheetComponent_For_5_For_2_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275repeater", "\u0275\u0275pipeBind2", "key_r2", "formatted", "ctx_r2", "withoutCyrillics", "split", "description", "DialogHotkeysCheatsheetComponent", "constructor", "hotkeysService", "inject", "HotkeysService", "keys", "hotkeys", "filter", "key", "values", "hasCyrillics", "flatMap", "index", "all", "withSeparator", "fragments", "length", "includes", "map", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "DialogHotkeysCheatsheetComponent_For_5_Template", "_forTrack0", "MatDialogTitle", "MatDialogContent", "MatDialogActions", "MatDialogClose", "MatButton", "MapPipe", "styles", "changeDetection"]
}
